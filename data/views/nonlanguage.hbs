<script>
    window.AudioContext = window.AudioContext || window.webkitAudioContext;

    var context = new AudioContext();

    var volumeDial = 1.0;
    var pitchDial = 1.0;
    var modeDial = 1;
    var acc = [];
    var arr = [], volume = 0.2, seconds = 0.1, tone = 441, limit = 0.8;
    var attack = 20;
    var decay = 6;
    var que = 0;
    var curveDialConfig = 'A';
    var curveDialOrder = 0;
    var ffCount = 0;
    var syncCount = 0;
    var beatsPerMinute = 140;
    var minuteLastBeat = 0;
    var beatIndex = 0;
    var sin2State = [1,0];
    var noteDial = [1,1,1,1];
    var accReady = 0;
    var accRecord = 0;
    var accArmed = 0;
    var accBeats = 4;
    var accLength = 0;
    var accSamplesRemaining = 0;
    var iAcc = 0; // write head index
    var jAcc; // read head index

    function beatsPerMinuteDial(select) {
        if (select == "+") {
            beatsPerMinute += 0.1;
        } else if (select == "++") {
            beatsPerMinute += 0.2;
        } else if (select == "+++++") {
            beatsPerMinute += 0.5;
        } else if (select == "-") {
            beatsPerMinute -= 0.1;
        } else if (select == "--") {
            beatsPerMinute -= 0.2;
        } else if (select == "-----") {
            beatsPerMinute -= 0.5;
        }
        document.getElementById("bpmDisplay").innerHTML = formatTime(beatsPerMinute);
    }

    function loaded() {
        document.getElementById("bpmDisplay").innerHTML = formatTime(beatsPerMinute);
    }

    function selectNote(dialNumber,tone1) {
        noteDial[dialNumber - 1] = tone1;
    }

    function sineWaveAt(sampleNumber, tone1, toneseq) {
        var sampleFreq = context.sampleRate / (tone1 * toneseq);
        return Math.sin(sampleNumber / (sampleFreq / (Math.PI*2)));
    };

    function sineWaveAt2(tone1, toneseq) {
        var sampleFreq = context.sampleRate / (tone1 * toneseq);
        var sin2MulRadians = 1 / (sampleFreq / (Math.PI*2));
        var sin2Mul = [Math.cos(sin2MulRadians),Math.sin(sin2MulRadians)];
        sin2State = [sin2State[0] * sin2Mul[0] - sin2State[1] * sin2Mul[1],
            sin2State[0] * sin2Mul[1] + sin2State[1] * sin2Mul[0]];
        return sin2State[1];
    }

    function refreshArr() {
        var i;
        var lastBeatIndex = -1;
        for (i = 0; i < context.sampleRate * seconds; i++) {
            var sampleIndex = que * context.sampleRate + i;
            var secondsIndex = sampleIndex / context.sampleRate;
            var minuteIndex = secondsIndex / 60;
            minuteIndex = minuteIndex - minuteLastBeat;
            var beatIndex = minuteIndex * beatsPerMinute;
            while (beatIndex >= 1) {
                minuteLastBeat = minuteLastBeat + 1.0/beatsPerMinute;
                beatIndex = beatIndex - 1;
            }
            // detect beat edge when armed
            if (accArmed && beatIndex < lastBeatIndex) {
                accReady = 0;
                accRecord = 1;
                accArmed = 0;
            }
            lastBeatIndex = beatIndex;
            var noteIndex = (beatIndex * 4) % 1;
            var volSeq = 1;
            if (attack * noteIndex < 1) {
                volSeq = attack * noteIndex;
            } else if (2 * noteIndex < 1) {
                volSeq = 1;
            } else {
                volSeq = 1 + (decay / 2) - decay * noteIndex;
            }
            if (volSeq >= 1) {
                volSeq = 1;
            }
            if (volSeq <= 0) {
                volSeq = 0;
            }
            //if ((beatIndex * 2) % 2 < 1) {
            //    volSeq = 10 * ((beatIndex * 2) % 2);
            //    if (volSeq >= 1) {
            //        volSeq = 1;
            //    }
            //} else if ((beatIndex * 2) % 2 < 2) {
            //    volSeq = ((beatIndex * 2) % 2 - 1) / 2;
            //}
            var toneSeq = 1;
            if (beatIndex * 4 < 1) {
                toneSeq = noteDial[0];
            } else if (beatIndex * 4 < 2) {
                toneSeq = noteDial[1];
            } else if (beatIndex * 4 < 3) {
                toneSeq = noteDial[2];
            } else {
                toneSeq = noteDial[3];
            }
            var osc = sineWaveAt2(tone * pitchDial, toneSeq);
            //var osc = sineWaveAt(que * context.sampleRate + i, tone * pitchDial, toneSeq);
            if (curveDialConfig == 'A') {
                if (curveDialOrder == 0) {
                    ;
                } else if (curveDialOrder == 2) {
                    osc = (2 * osc) / (osc * osc + 1);
                } else if (curveDialOrder == 4) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                } else if (curveDialOrder == 6) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2 * osc) / (osc * osc + 1);
                } else if (curveDialOrder == 8) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                } else if (curveDialOrder == 10) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2 * osc) / (osc * osc + 1);
                } else if (curveDialOrder == 12) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                } else if (curveDialOrder == 14) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2 * osc) / (osc * osc + 1);
                } else if (curveDialOrder == 16) {
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                    osc = (2*osc) / (osc*osc+1); osc = (2*osc) / (osc*osc+1);
                }
            } else if (curveDialConfig == 'B') {
                if (curveDialOrder == 0) {
                    ;
                } else if (curveDialOrder == 2) {
                    osc = (5 * osc) / (osc * osc + 4);
                } else if (curveDialOrder == 4) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                } else if (curveDialOrder == 6) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5 * osc) / (osc * osc + 4);
                } else if (curveDialOrder == 8) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                } else if (curveDialOrder == 10) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5 * osc) / (osc * osc + 4);
                } else if (curveDialOrder == 12) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                } else if (curveDialOrder == 14) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5 * osc) / (osc * osc + 4);
                } else if (curveDialOrder == 16) {
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                    osc = (5*osc) / (osc*osc+4); osc = (5*osc) / (osc*osc+4);
                }
            }
            arr[i] = osc * volume * volumeDial * volSeq;
            if (accRecord && accSamplesRemaining > 0) {
                if (acc.length <= iAcc) {
                    acc[iAcc] = 0;
                }
                acc[iAcc] += arr[i];
                if (acc[iAcc] >= limit) {
                    acc[iAcc] = limit;
                }
                if (acc[iAcc] <= - limit) {
                    acc[iAcc] = - limit;
                }
                iAcc += 1;
                accSamplesRemaining -= 1;
                if (accSamplesRemaining == 0) {
                    jAcc = 0; // init read head
                    accReady = 1; // ready for playback? yes
                    accRecord = 0; // recording? no
                    accArmed = 0; // armed to record? no
                    document.getElementById('buttonAcc').disabled = false;
                    document.getElementById('buttonMode1').disabled = true;
                    document.getElementById('buttonMode2').disabled = false;
                }
            }
            //if (i < (context.sampleRate * seconds) / 1000) {
            //    arr[i] *= i / ( context.sampleRate * seconds / 1000 );
            //}
            //if ( (context.sampleRate * seconds - i) < context.sampleRate * seconds / 1000) {
            //    arr[i] *= (context.sampleRate * seconds - i) / ( context.sampleRate * seconds / 1000 );
            //}
            if (arr[i] >= limit) {
                arr[i] = limit;
            } else if (arr[i] <= - limit) {
                arr[i] = - limit;
            }
        }
    };
    function formatTime(x) {
        var frac = x - Math.trunc(x);
        if (frac < 0) {
            frac = 0;
        }
        if (frac > 1) {
            frac = 1;
        }
        var after = "" + Math.trunc(frac * 1000);
        if (after.length >= 4) {
            after = "999";
        } else if (after.length == 2) {
            after = "0" + after;
        } else if (after.length == 1) {
            after = "00" + after;
        } else if (after.length == 0) {
            after = "000";
        }
        return Math.trunc(x) + "." + after;
    }
    function playSound() {
        var buf = new Float32Array(1 + Math.trunc(context.sampleRate * seconds));
        if (modeDial == 1) {
            for (var i = 0; i < context.sampleRate * seconds; i++) {
                buf[i] = arr[i];
            }
        } else if (modeDial == 2) {
            for (var i = 0; i < context.sampleRate * seconds; i++) {
                buf[i] = acc[jAcc];
                jAcc = (jAcc + 1) % accLength;
            }
        }
        var buffer = context.createBuffer(1, buf.length, context.sampleRate);
        buffer.copyToChannel(buf, 0)

        var source = context.createBufferSource();
        source.buffer = buffer;
        source.connect(context.destination);
        if (! que || que < context.currentTime) {
            // console.log("ff que");
            que = context.currentTime + 0.1;
            ffCount += 1;
            document.getElementById("ffCountDisplay").innerHTML = ffCount;
        } else {
            // console.log("que margin: " + (que - context.currentTime));
            syncCount += 1;
            document.getElementById("syncCountDisplay").innerHTML = syncCount;
        }
        source.start(que);
        que = que + seconds;
        document.getElementById("contextSecondsDisplay").innerHTML = formatTime(context.currentTime);
        document.getElementById("queSecondsDisplay").innerHTML = formatTime(que);
        if (modeDial == 1) {
            refreshArr();
        }
    };

    function updateAcc() {
        var secondsPerBeat = 60.0 / beatsPerMinute;
        var accSeconds = accBeats * secondsPerBeat;
        accSamplesRemaining = Math.trunc(context.sampleRate * accSeconds) + 1;
        iAcc = 0;
        accLength = Math.trunc(context.sampleRate * accSeconds) + 1;
        accReady = 0; // ready for playback? no
        accRecord = 0; // currently recording? no
        accArmed = 1; // armed to record starting at next beat? yes
        document.getElementById('buttonAcc').disabled = true;
        document.getElementById('buttonMode1').disabled = true;
        document.getElementById('buttonMode2').disabled = true;
    };
    refreshArr();
    function volumeDialUp() {
        volumeDial *= 1.4;
        refreshArr();
    };
    function volumeDialDown() {
        volumeDial *= 0.5;
        refreshArr();
    };
    function pitchDialHigh() {
        pitchDial *= 2;
        refreshArr();
    };
    function pitchDialLow() {
        pitchDial *= 0.7;
        refreshArr();
    };
    function selectCurveDial(config,order) {
        curveDialConfig = config;
        curveDialOrder = order;
    }
    function modeDial1() {
        modeDial = 1;
        document.getElementById('buttonMode1').disabled = true;
        document.getElementById('buttonMode2').disabled = false;
        document.getElementById('buttonAcc').disabled = false;
    };
    function modeDial2() {
        modeDial = 2;
        document.getElementById('buttonMode1').disabled = false;
        document.getElementById('buttonMode2').disabled = true;
        document.getElementById('buttonAcc').disabled = true;
    };
    // playSound();
    setInterval(function () { playSound(); }, 100);

</script>

<pre>

...
</pre>
<div id="rowBPM">
  <button onclick="beatsPerMinuteDial('-----')">-----</button>
  <button onclick="beatsPerMinuteDial('--')">--</button>
  <button onclick="beatsPerMinuteDial('-')">-</button>
  <span id="bpmDisplay"></span>
  <button onclick="beatsPerMinuteDial('+')">+</button>
  <button onclick="beatsPerMinuteDial('++')">++</button>
  <button onclick="beatsPerMinuteDial('+++++')">+++++</button>
</div>
<div id="row0">
  <span id="contextSecondsDisplay" style="color: red"></span>
  <span id="queSecondsDisplay" style="color: green"></span>
  <span id="ffCountDisplay"></span>
  <span id="syncCountDisplay"></span>
</div>
<div id="row1">
  <button onclick="volumeDialUp()">up</button>
  <button onclick="pitchDialHigh()">high</button>
  ...
  <button onclick="updateAcc()" id="buttonAcc">acc</button>
  <button onclick="modeDial1()" id="buttonMode1" disabled>1</button>
  <button onclick="modeDial2()" id="buttonMode2" disabled>2</button>
</div>
<div id="row2">
  <button onclick="volumeDialDown()">down</button>
  <button onclick="pitchDialLow()">low</button>
</div>
<div id="rowCurve1">
  curve &nbsp;
  <button onclick="selectCurveDial('A',0)">A0</button>
  <button onclick="selectCurveDial('A',2)">A2</button>
  <button onclick="selectCurveDial('A',4)">A4</button>
  <button onclick="selectCurveDial('A',6)">A6</button>
  <button onclick="selectCurveDial('A',8)">A8</button>
  <button onclick="selectCurveDial('A',10)">A10</button>
  <button onclick="selectCurveDial('A',12)">A12</button>
  <button onclick="selectCurveDial('A',14)">A14</button>
  <button onclick="selectCurveDial('A',16)">A16</button>
</div>
<div id="rowCurve2">
  curve &nbsp;
  <button onclick="selectCurveDial('B',0)" disabled>B0</button>
  <button onclick="selectCurveDial('B',2)">B2</button>
  <button onclick="selectCurveDial('B',4)">B4</button>
  <button onclick="selectCurveDial('B',6)">B6</button>
  <button onclick="selectCurveDial('B',8)">B8</button>
  <button onclick="selectCurveDial('B',10)">B10</button>
  <button onclick="selectCurveDial('B',12)">B12</button>
  <button onclick="selectCurveDial('B',14)">B14</button>
  <button onclick="selectCurveDial('B',16)">B16</button>
</div>
<div id="row4">
  <button onClick="selectNote(1,1)">C</button>
  <button onClick="selectNote(1,1.1)">D</button>
  <button onClick="selectNote(1,1.2)">E</button>
  <button onClick="selectNote(1,1.3)">F</button>
  <button onClick="selectNote(1,1.4)">G</button>
</div>
<div id="row5">
  <button onClick="selectNote(2,1)">C</button>
  <button onClick="selectNote(2,1.1)">D</button>
  <button onClick="selectNote(2,1.2)">E</button>
  <button onClick="selectNote(2,1.3)">F</button>
  <button onClick="selectNote(2,1.4)">G</button>
</div>
<div id="row6">
  <button onClick="selectNote(3,1)">C</button>
  <button onClick="selectNote(3,1.1)">D</button>
  <button onClick="selectNote(3,1.2)">E</button>
  <button onClick="selectNote(3,1.3)">F</button>
  <button onClick="selectNote(3,1.4)">G</button>
</div>
<div id="row7">
  <button onClick="selectNote(4,1)">C</button>
  <button onClick="selectNote(4,1.1)">D</button>
  <button onClick="selectNote(4,1.2)">E</button>
  <button onClick="selectNote(4,1.3)">F</button>
  <button onClick="selectNote(4,1.4)">G</button>
</div>
