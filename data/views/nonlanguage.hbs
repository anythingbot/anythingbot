<script>
    window.AudioContext = window.AudioContext || window.webkitAudioContext;

    var context = new AudioContext();

    var volumeDial = 1.0;
    var pitchDial = 1.0;
    var modeDial = 1;
    var accReady = 0;
    var acc = [];
    var arr = [], volume = 0.2, seconds = 0.1, tone = 441, limit = 0.8;
    var currentBuffer = null;
    var currentSource = null;
    var que = 0;
    var curveDial = 0;
    var ffCount = 0;
    var syncCount = 0;
    var beatsPerMinute = 140;
    var sin2State = [1,0];
    var noteDial = [1,1,1,1];

    function selectNote(dialNumber,tone1) {
        noteDial[dialNumber - 1] = tone1;
    }

    function sineWaveAt(sampleNumber, tone1, toneseq) {
        var sampleFreq = context.sampleRate / (tone1 * toneseq);
        return Math.sin(sampleNumber / (sampleFreq / (Math.PI*2)));
    };

    function sineWaveAt2(tone1, toneseq) {
        var sampleFreq = context.sampleRate / (tone1 * toneseq);
        var sin2MulRadians = 1 / (sampleFreq / (Math.PI*2));
        var sin2Mul = [Math.cos(sin2MulRadians),Math.sin(sin2MulRadians)];
        sin2State = [sin2State[0] * sin2Mul[0] - sin2State[1] * sin2Mul[1],
            sin2State[0] * sin2Mul[1] + sin2State[1] * sin2Mul[0]];
        return sin2State[1];
    }

    function refreshArr() {
        var i;
        for (i = 0; i < context.sampleRate * seconds; i++) {
            var sampleIndex = que * context.sampleRate + i;
            var secondsIndex = sampleIndex / context.sampleRate;
            var minuteIndex = secondsIndex / 60;
            var beatIndex = minuteIndex * beatsPerMinute;
            var beatFrac = beatIndex - Math.trunc(beatIndex);
            var toneSeq = 1;
            if (beatFrac * 4 < 1) {
                toneSeq = noteDial[0];
            } else if (beatFrac * 4 < 2) {
                toneSeq = noteDial[1];
            } else if (beatFrac * 4 < 3) {
                toneSeq = noteDial[2];
            } else {
                toneSeq = noteDial[3];
            }
            var osc = sineWaveAt2(tone * pitchDial, toneSeq);
            //var osc = sineWaveAt(que * context.sampleRate + i, tone * pitchDial, toneSeq);
            if (curveDial == 0) {
                ;
            } else if (curveDial == 2) {
                osc = (2 * osc) / (osc * osc + 1);
            } else if (curveDial == 4) {
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
            } else if (curveDial == 6) {
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
            } else if (curveDial == 8) {
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
            } else if (curveDial == 10) {
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
                osc = (2 * osc) / (osc * osc + 1);
            }
            arr[i] = osc * volume * volumeDial;
            //if (i < (context.sampleRate * seconds) / 1000) {
            //    arr[i] *= i / ( context.sampleRate * seconds / 1000 );
            //}
            //if ( (context.sampleRate * seconds - i) < context.sampleRate * seconds / 1000) {
            //    arr[i] *= (context.sampleRate * seconds - i) / ( context.sampleRate * seconds / 1000 );
            //}
            if (arr[i] >= limit) {
                arr[i] = limit;
            } else if (arr[i] <= - limit) {
                arr[i] = - limit;
            }
        }
    };
    function formatTime(x) {
        var frac = x - Math.trunc(x);
        if (frac < 0) {
            frac = 0;
        }
        if (frac > 1) {
            frac = 1;
        }
        var after = "" + Math.trunc(frac * 1000);
        if (after.length >= 4) {
            after = "999";
        } else if (after.length == 2) {
            after = "0" + after;
        } else if (after.length == 1) {
            after = "00" + after;
        } else if (after.length == 0) {
            after = "000";
        }
        return Math.trunc(x) + "." + after;
    }
    function playSound() {
        var array;
        if (modeDial == 1) {
            array = arr;
        } else if (modeDial == 2) {
            array = acc;
        }
        var buf = new Float32Array(array.length)
        for (var i = 0; i < array.length; i++) buf[i] = array[i];
        var buffer = context.createBuffer(1, buf.length, context.sampleRate);
        buffer.copyToChannel(buf, 0)

        var source = context.createBufferSource();
        source.buffer = buffer;
        source.connect(context.destination);
        if (! que || que < context.currentTime) {
            // console.log("ff que");
            que = context.currentTime + 0.1;
            ffCount += 1;
            document.getElementById("ffCountDisplay").innerHTML = ffCount;
        } else {
            // console.log("que margin: " + (que - context.currentTime));
            syncCount += 1;
            document.getElementById("syncCountDisplay").innerHTML = syncCount;
        }
        source.start(que);
        que = que + seconds;
        document.getElementById("contextSecondsDisplay").innerHTML = formatTime(context.currentTime);
        document.getElementById("queSecondsDisplay").innerHTML = formatTime(que);
        refreshArr();

        currentBuffer = buffer;
        currentSource = source;
    };

    function updateSound() {
        var array;
        if (modeDial == 1) {
            array = arr;
        } else if (modeDial == 2) {
            array = acc;
        }
        var buf = new Float32Array(array.length)
        for (var i = 0; i < array.length; i++) buf[i] = array[i];
        var buffer = context.createBuffer(1, buf.length, context.sampleRate);
        buffer.copyToChannel(buf, 0);
    }

    function updateAcc() {
        var i;
        for (i = 0; i < context.sampleRate * seconds; i++) {
            var x;
            if (i < acc.length) {
                x = acc[i];
            } else {
                x = 0;
            }
            acc[i] = x + arr[i];
            if (acc[i] >= limit) {
                acc[i] = limit;
            } else if (acc[i] <= - limit) {
                acc[i] = - limit;
            }
        }
        accReady = 1;
        document.getElementById('buttonMode1').disabled = false;
        document.getElementById('buttonMode2').disabled = false;
    };
    refreshArr();
    function volumeDialUp() {
        volumeDial *= 1.4;
        refreshArr();
    };
    function volumeDialDown() {
        volumeDial *= 0.5;
        refreshArr();
    };
    function pitchDialHigh() {
        pitchDial *= 2;
        refreshArr();
    };
    function pitchDialLow() {
        pitchDial *= 0.7;
        refreshArr();
    };
    function selectCurveDial(x) {
        curveDial = x;
    }
    function modeDial1() {
        if (accReady) {
            modeDial = 1;
        }
    };
    function modeDial2() {
        if (accReady) {
            modeDial = 2;
        }
    };
    // playSound();
    setInterval(function () { playSound(); }, 100);

</script>

<pre>

...
</pre>
<div id="row0">
  <span id="contextSecondsDisplay" style="color: red"></span>
  <span id="queSecondsDisplay" style="color: green"></span>
  <span id="ffCountDisplay"></span>
  <span id="syncCountDisplay"></span>
</div>
<div id="row1">
  <button onclick="volumeDialUp()">up</button>
  <button onclick="pitchDialHigh()">high</button>
  ...
  <button onclick="updateAcc()" id="buttonAcc">acc</button>
  <button onclick="modeDial1()" id="buttonMode1" disabled>1</button>
  <button onclick="modeDial2()" id="buttonMode2" disabled>2</button>
</div>
<div id="row2">
  <button onclick="volumeDialDown()">down</button>
  <button onclick="pitchDialLow()">low</button>
</div>
<div id="row3">
  curve &nbsp;
  <button onclick="selectCurveDial(0)">0</button>
  <button onclick="selectCurveDial(2)">2</button>
  <button onclick="selectCurveDial(4)">4</button>
  <button onclick="selectCurveDial(6)">6</button>
  <button onclick="selectCurveDial(8)">8</button>
  <button onclick="selectCurveDial(10)">10</button>
</div>
<div id="row4">
  <button onClick="selectNote(1,1)">C</button>
  <button onClick="selectNote(1,1.1)">D</button>
  <button onClick="selectNote(1,1.2)">E</button>
  <button onClick="selectNote(1,1.3)">F</button>
  <button onClick="selectNote(1,1.4)">G</button>
</div>
<div id="row5">
  <button onClick="selectNote(2,1)">C</button>
  <button onClick="selectNote(2,1.1)">D</button>
  <button onClick="selectNote(2,1.2)">E</button>
  <button onClick="selectNote(2,1.3)">F</button>
  <button onClick="selectNote(2,1.4)">G</button>
</div>
<div id="row6">
  <button onClick="selectNote(3,1)">C</button>
  <button onClick="selectNote(3,1.1)">D</button>
  <button onClick="selectNote(3,1.2)">E</button>
  <button onClick="selectNote(3,1.3)">F</button>
  <button onClick="selectNote(3,1.4)">G</button>
</div>
<div id="row7">
  <button onClick="selectNote(4,1)">C</button>
  <button onClick="selectNote(4,1.1)">D</button>
  <button onClick="selectNote(4,1.2)">E</button>
  <button onClick="selectNote(4,1.3)">F</button>
  <button onClick="selectNote(4,1.4)">G</button>
</div>
