<!DOCTYPE html>
<html>
    <head>
        <link rel="icon" type="image/ico" href="/favicon.ico?raw=true">
        <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
        <script src="/js/lib/cookie.js"></script>
        <script>

function imgHello(src,width) {
    var imgElt = document.createElement("img");
    imgElt.src = src;
    document.getElementById('hellodiv').appendChild(imgElt);
    if (width) {
        imgElt.width = width;
    }
}

function updateHello_impl(hellomsg, eltType, hasMarkup) {
    if (hellomsg.length == 0) {
        hellomsg = ' ';
    }
    var i;
    var terminals;
    if (state.mode == '0000') {
        terminals = [
            [document.getElementById('l0000'),null],
            [document.getElementById('r0000'),"color : red"]
        ];
    } else {
        terminals = [[document.getElementById('hellodiv'),null]];
    }
    for (i = 0; i < terminals.length; i += 1) {
        var helloElt = document.createElement(eltType);
        var j;
        var hellomsg2 = [];
        for (j = 0; j < hellomsg.length; j += 1) {
            if (hasMarkup || hellomsg[j] != ' ') {
               hellomsg2.push(hellomsg[j]);
            } else {
               hellomsg2.push('&nbsp;');
            }
        }
        hellomsg = hellomsg2.join('');
        helloElt.innerHTML = hellomsg;
        if (state.mode == "00") {
            helloElt.style = "color : red;";
        }
        // add style
        if (terminals[i][1]) {
            helloElt.style = terminals[i][1];
        }
        terminals[i][0].appendChild(helloElt);
    }
}

function updateHello(hellomsg,hasMarkup) {
    updateHello_impl(hellomsg, 'div',hasMarkup);
}

function updateHelloSpan(hellomsg) {
    updateHello_impl(hellomsg, 'span', 0);
}

function clearHello() {
    state.mode = '';
    var terminals = [
        document.getElementById('hellodiv'),
        document.getElementById('l0000'),
        document.getElementById('r0000')
    ];
    var i;
    for (i = 0; i < terminals.length; i += 1) {
        var elt = terminals[i];
        while (1) {
            if (elt.children.length == 0) {
                break;
            }
            elt.removeChild(elt.children[0]);
        }
    }
}

var countdownStarted = 0;
var countdown;

var reloadCountdown = function () {
    updateHelloSpan('&nbsp;' + countdown);
    if (countdown == 0) {
        location.reload();
    } else {
        countdown -= 1;
        setTimeout(reloadCountdown, 1000);
    }
};

var host = window.document.location.host.replace(/:.*/, '');
var ws = new WebSocket('ws://' + host + ':3010');
window.addEventListener('beforeunload',function () { ws.close(); });
ws.onmessage = function (event) {
    var msg = JSON.parse(event.data).content;
    if (msg.substring(0,"new opentime".length) == "new opentime") {
        // new opentime HANDLE TAG TIME
        // TIME format is Date.now()
        var args = msg.substring("new opentime ".length,msg.length);
        var argArray = args.split(" ");
        setCookie("opentime",argArray[2],14);
    }
    if (msg == "a client said: restart" && (! countdownStarted)) {
        countdownStarted = 1;
        countdown = 30;
        updateHelloSpan('reloading in');
        reloadCountdown();
    } else {
        updateHello(msg);
    }
};



// HUMAN: enter your handle into the HTML element handleInput and press the
//        setHandle() button to set your handle
function setHandle() {
    var handleString = document.getElementById('handleInput').value;
    setCookie("handle",handleString,365);
}

function getHandle() {
    var handleString = getCookie("handle");
    var elt = document.getElementById('handleInput');
    elt.value = handleString;
}

// HUMAN: enter your tag into the HTML element tagInput and press the setTag()
//        button to set your file tag
function setTag() {
    var tagString = document.getElementById('tagInput').value;
    setCookie("tag",tagString,14);
}

function getTag() {
    var tagString = getCookie("tag");
    var elt = document.getElementById('tagInput');
    elt.value = tagString;
}

// HUMAN: set your handle, set your tag, and press newOpentime() to open a new
// file with the given tag
function newOpentime() {
    sayhello("new opentime " + getCookie("handle") + " " + getCookie("tag"));
}

function setOpentime() {
    var opentimeString = document.getElementById('opentimeInput').value;
    setCookie("opentime",opentimeString,14);
}

function getOpentime() {
    var opentimeString = getCookie("opentime");
    var elt = document.getElementById('opentimeInput');
    elt.value = opentimeString;
}

var chrLookup = [
    '', '', '', '', '', '', '', '', '', '\t', '\n', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '',   '',   '', '', '', '', '', '',
    ' ', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.',
    '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
    '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',
    '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
    'z', '{', '|', '}', '~'];

function chr(n) {
    if (n == 9 || n == 10 || (n >= 32 && n <= 126)) {
        return chrLookup[n];
    } else {
        throw new Error("chr: invalid character");
    }
}

function ispchr(n) {
    return (n >= 33 && n <= 126);
}

function ischr(n) {
    return (n == 9 || n == 10 || (n >= 32 && n <= 126));
}

function pchr(n) {
    if (n >= 33 && n <= 126) {
        return chrLookup[n];
    } else {
        throw new Error("pchr: invalid character");
    }
}

var ordLookup = {
    ' ': 32, '$': 36, '(': 40, ',': 44, '0': 48, '4': 52, '8': 56, '<': 60,
    '@': 64, 'D': 68, 'H': 72, 'L': 76, 'P': 80, 'T': 84, 'X': 88, '\\': 92,
    '`': 96, 'd': 100, 'h': 104, 'l': 108, 'p': 112, 't': 116, 'x': 120,
    '|': 124, '#': 35, "'": 39, '+': 43, '/': 47, '3': 51, '7': 55, ';': 59,
    '?': 63, 'C': 67, 'G': 71, 'K': 75, 'O': 79, 'S': 83, 'W': 87, '[': 91,
    '_': 95, 'c': 99, 'g': 103, 'k': 107, 'o': 111, 's': 115, 'w': 119,
    '{': 123, '\n': 10, '"': 34, '&': 38, '*': 42, '.': 46, '2': 50, '6': 54,
    ':': 58, '>': 62, 'B': 66, 'F': 70, 'J': 74, 'N': 78, 'R': 82, 'V': 86,
    'Z': 90, '^': 94, 'b': 98, 'f': 102, 'j': 106, 'n': 110, 'r': 114,
    'v': 118, 'z': 122, '~': 126, '\t': 9, '!': 33, '%': 37, ')': 41,
    '-': 45, '1': 49, '5': 53, '9': 57, '=': 61, 'A': 65, 'E': 69, 'I': 73,
    'M': 77, 'Q': 81, 'U': 85, 'Y': 89, ']': 93, 'a': 97, 'e': 101, 'i': 105,
    'm': 109, 'q': 113, 'u': 117, 'y': 121, '}': 125
};

// look up character c in the character->ordinal chart
function ord(c) {
    if (ordLookup[c]) {
        return ordLookup[c];
    } else {
        throw new Error("ord: invalid code");
    }
}

// is it possible to look up character c in the character->ordinal chart?
function isord(c) {
    return (!! ordLookup[c]);
}

function ispord(c) {
    return (isord(c) && ispchr(ord(c)));
}

var state = {
    cmd : '',
    cmdHistory : [],
    cmdCursor:null,
    ctx:null,
    shift:false,
    mode:'',
    heli:0
};

function makespan(c) {
    var cElt = document.createElement("span");
    if (state.mode == "00") {
        cElt.style = "color : red;";
    }
    if (c == ' ') {
        cElt.innerHTML = '&nbsp;';
    } else {
        cElt.innerHTML = c;
    }
    return cElt;
}

function detachheli() {
    state.heli = 0;
    setCookie("heli","0",365);
    var c = document.getElementById('canvasdiv');
    var children = c.children;
    while (children.length > 0) {
        c.removeChild(children[0]);
    }
}

function attachheli() {
    state.heli = 1;
    setCookie("heli","1",365);
    var ctrls = document.createElement('div');
    var e = document.createElement('input');
    e.setAttribute('id','heliParams');
    e.setAttribute('value',"50;-55,55,-50,50;1;-1[70]+0;10,30,70;1;1");
    ctrls.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"drawheli()");
    e.innerHTML = "drawheli()";
    ctrls.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"clearCanvas()");
    e.innerHTML = "clearCanvas()";
    ctrls.appendChild(e);

    var ctrls2 = document.createElement('div');
    e = document.createElement('input');
    e.setAttribute('id','cardParams');
    ctrls2.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"drawcard()");
    e.innerHTML = "drawcard()";
    ctrls2.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"detachheli()");
    e.innerHTML = "detachheli()";
    ctrls2.appendChild(e);

    // e = document.createElement('button');
    // e.setAttribute('onclick',"drawcard2()");
    // e.innerHTML = "drawcard2()";
    // ctrls2.appendChild(e);

    var view = document.createElement('canvas');
    view.setAttribute('id','hellocanvas');
    view.setAttribute('width',600);
    view.setAttribute('height',600);
    view.setAttribute('style','border:3px dashed #000000;');
    var c = document.getElementById('canvasdiv');
    c.appendChild(ctrls);
    c.appendChild(ctrls2);
    c.appendChild(view);
    initContext();
    clearCanvas();
}

function rollbackCmdHistory() {
    // compute state.cmdCursor
    if (state.cmdCursor === null) {
        state.cmdCursor = state.cmdHistory.length - 1;
    }
    // compute state.cmd based on state.cmdCursor and state.cmdHistory
    if (state.cmdCursor == null) {
        state.cmdCursor = state.cmdHistory.length - 1;
    } else if (state.cmdCursor > 0) {
        state.cmdCursor -= 1;
    }
    state.cmd = state.cmdHistory[state.cmdCursor];
    // clear cmdElt children
    var cmdElt = document.getElementById('cmddiv');
    var children = cmdElt.children;
    while (children.length > 0) {
        cmdElt.removeChild(children[0]);
    }
    // append character spans to cmdElt
    var i;
    for (i = 0; state.cmd.length > i; i += 1) {
        cmdElt.appendChild(makespan(state.cmd[i]));
    }
}

var keymap = {
    'virtuala' : ['a','A'],
    'virtualb' : ['b','B'],
    'virtualc' : ['c','C'],
    'virtuald' : ['d','D'],
    'virtuale' : ['e','E'],
    'virtualf' : ['f','F'],
    'virtualg' : ['g','G'],
    'virtualh' : ['h','H'],
    'virtuali' : ['i','I'],
    'virtualj' : ['j','J'],
    'virtualk' : ['k','K'],
    'virtuall' : ['l','L'],
    'virtualm' : ['m','M'],
    'virtualn' : ['n','N'],
    'virtualo' : ['o','O'],
    'virtualp' : ['p','P'],
    'virtualq' : ['q','Q'],
    'virtualr' : ['r','R'],
    'virtuals' : ['s','S'],
    'virtualt' : ['t','T'],
    'virtualu' : ['u','U'],
    'virtualv' : ['v','V'],
    'virtualw' : ['w','W'],
    'virtualx' : ['x','X'],
    'virtualy' : ['y','Y'],
    'virtualz' : ['z','Z'],

    'virtualbacktick' : ['`','~'],
    'virtual1' : ['1','!'],
    'virtual2' : ['2','@'],
    'virtual3' : ['3','#'],
    'virtual4' : ['4','$'],
    'virtual5' : ['5','%'],
    'virtual6' : ['6','^'],
    'virtual7' : ['7','&'],
    'virtual8' : ['8','*'],
    'virtual9' : ['9','('],
    'virtual0' : ['0',')'],
    'virtualminus' : ['-','_'],
    'virtualequals' : ['=','+'],

    'virtualopenbracket' : ['[','{'],
    'virtualclosebracket' : [']','}'],
    'virtualbackslash' : ['\\','|'],

    'virtualsemicolon' : [';',':'],
    'virtualquote' : ['\'','"'],

    'virtualslash' : ['/','?'],
    'virtualcomma' : [',','<'],
    'virtualperiod' : ['.','>'],
};

function redrawKeyboard() {
    var keyids = Object.keys(keymap);
    var i;
    for (i = 0; i < keyids.length; i += 1) {
        var k = keyids[i];
        var e = document.getElementById(k);
        if (state.shift) {
            e.innerHTML = keymap[k][1];
        } else {
            e.innerHTML = keymap[k][0];
        }
    }
}

function virtualCaps() {
    if (state.shift == 2) {
        state.shift = 0;
    } else {
        state.shift = 2;
    }
    var shiftElt = document.getElementById('virtualShift');
    if (state.shift == 2) {
        shiftElt.innerHTML = "SHIFT";
    } else {
        shiftElt.innerHTML = "shift";
    }
    redrawKeyboard();
}


function virtualShift() {
    if (state.shift == 0) {
        state.shift = 1;
    } else {
        state.shift = 0;
    }
    var shiftElt = document.getElementById('virtualShift');
    if (state.shift == 1) {
        shiftElt.innerHTML = "Shift";
    } else {
        shiftElt.innerHTML = "shift";
    }
    redrawKeyboard();
}

function virtualEnter() {
    var cmdElt = document.getElementById('cmddiv');
    var children = cmdElt.children;
    while (children.length > 0) {
        cmdElt.removeChild(children[0]);
    }
    sayhello(state.cmd,0);
    state.cmdHistory.push(state.cmd);
    updateHello(state.cmd);
    state.cmd = '';
    state.cmdCursor = null;
}

function virtualBackspace() {
    if (state.cmd) {
        state.cmd = state.cmd.substring(0,state.cmd.length - 1);
        var cmdElt = document.getElementById('cmddiv');
        cmdElt.removeChild(cmdElt.children[cmdElt.children.length - 1]);
    }
}

function virtualKbd(k1,k2) {
    var k;
    if (state.shift == 2) {
        k = k2;
    } else if (state.shift == 1) {
        k = k2;
        virtualShift();
    } else {
        k = k1;
    }
    var cmdElt = document.getElementById('cmddiv');
    cmdElt.appendChild(makespan(k));
    state.cmd = state.cmd + k;
}

function getKey(keyCode,shiftKey) {
    if (shiftKey) {
        if (keyCode >= 65 && keyCode <= 90) {
            return chr(keyCode);
        } else if (keyCode >= 48 && keyCode <= 57) {
            return decodeShiftNumberArray[keyCode - 48];
        }
        // handle punctuation
        return '?';
    }
    // ! shiftKey
    if (keyCode >= 65 && keyCode <= 90) {
        return chr(keyCode + 32);
    } else if (keyCode >= 48 && keyCode <= 57) {
        return chr(keyCode);
    }
    // handle punctuation
    return '?';
}

var decodeShiftNumberArray = [')','!','@','#','$','%','^','&','*','('];

var keyActions0 = [
    function () { virtualKbd('`','~');},
    function () { virtualKbd('1','!');},
    function () { virtualKbd('2','@');},
    function () { virtualKbd('3','#');},
    function () { virtualKbd('4','$');},
    function () { virtualKbd('5','%');},
    function () { virtualKbd('6','^');},
    function () { virtualKbd('7','&');},
    function () { virtualKbd('8','*');},
    function () { virtualKbd('9','(');},
    function () { virtualKbd('0',')');},
    function () { virtualKbd('-','_');},
    function () { virtualKbd('=','+');},
    function () { virtualBackspace();},
];

var keyActions1 = [
    function () { virtualKbd('q','Q');},
    function () { virtualKbd('w','W');},
    function () { virtualKbd('e','E');},
    function () { virtualKbd('r','R');},
    function () { virtualKbd('t','T');},
    function () { virtualKbd('y','Y');},
    function () { virtualKbd('u','U');},
    function () { virtualKbd('i','I');},
    function () { virtualKbd('o','O');},
    function () { virtualKbd('p','P');},
    function () { virtualKbd('[','{');},
    function () { virtualKbd(']','}');},
    function () { virtualKbd('\\','|');},
];

var keyActions2 = [
    function () { virtualCaps();},
    function () { virtualKbd('a','A');},
    function () { virtualKbd('s','S');},
    function () { virtualKbd('d','D');},
    function () { virtualKbd('f','F');},
    function () { virtualKbd('g','G');},
    function () { virtualKbd('h','H');},
    function () { virtualKbd('j','J');},
    function () { virtualKbd('k','K');},
    function () { virtualKbd('l','L');},
    function () { virtualKbd(';',':');},
    function () { virtualKbd('\'','"');},
    function () { virtualEnter();},
];

var keyActions3 = [
    function () { virtualShift();},
    function () { virtualKbd('z','Z');},
    function () { virtualKbd('x','X');},
    function () { virtualKbd('c','C');},
    function () { virtualKbd('v','V');},
    function () { virtualKbd('b','B');},
    function () { virtualKbd('n','N');},
    function () { virtualKbd('m','M');},
    function () { virtualKbd(',','<');},
    function () { virtualKbd('.','>');},
    function () { virtualKbd('/','?');},
];

var keyActions4 = [
    function () { virtualKbd(' ',' ');},
];

function pageLoaded() {
    document.body.style.fontFamily = "courier";
    getHandle();
    getTag();
    getOpentime();
    var i;
    var kbd0 = document.getElementById('kbddiv0');
    for (i = 0; i < kbd0.children.length; i += 1) {
        var btnspan = kbd0.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions0[i]);
    }
    var kbd1 = document.getElementById('kbddiv1');
    for (i = 0; i < kbd1.children.length; i += 1) {
        var btnspan = kbd1.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions1[i]);
    }
    var kbd2 = document.getElementById('kbddiv2');
    for (i = 0; i < kbd2.children.length; i += 1) {
        var btnspan = kbd2.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions2[i]);
    }
    var kbd3 = document.getElementById('kbddiv3');
    for (i = 0; i < kbd3.children.length; i += 1) {
        var btnspan = kbd3.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions3[i]);
    }
    var kbd4 = document.getElementById('kbddiv4');
    for (i = 0; i < kbd4.children.length; i += 1) {
        var btnspan = kbd4.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions4[i]);
    }
    if (0 | getCookie("heli")) {
        attachheli();
        drawcard();
    }
    document.body.onkeydown = function (e) {
        if (! (e.srcElement === document.body ||
               e.target === document.body)) {
            return;
        }
        if ( (e.keyCode >= 16 && e.keyCode <= 18) ||
             (e.keyCode == 20) ||
             (e.shiftKey && e.ctrlKey ) ) {
            return;
        }
        // console.log(e);
        // console.log(e.keyCode);
        // console.log(getKey(e.keyCode,e.shiftKey));
        // console.log(ispord(getKey(e.keyCode,e.shiftKey)));
        if (e.keyCode == 13 && state.cmd) {
            virtualEnter();
        } else if (e.keyCode == 38) {
            rollbackCmdHistory();
        } else if (e.keyCode == 8) {
            virtualBackspace();
        } else if (state.heli && (e.keyCode == 72 || e.keyCode == 74 ||
                        e.keyCode == 75 || e.keyCode == 76)) {
            if (e.keyCode == 72) {
                shiftdrawblocks(-1,0);
            } else if (e.keyCode == 74) {
                shiftdrawblocks(0,1);
            } else if (e.keyCode == 75) {
                shiftdrawblocks(0,-1);
            } else if (e.keyCode == 76) {
                shiftdrawblocks(1,0);
            }
        } else if (e.key == ' ' || ispord(e.key)) {
            var cmdElt = document.getElementById('cmddiv');
            cmdElt.appendChild(makespan(e.key));
            state.cmd = state.cmd + e.key;
        } else if (e.keyCode == 32 || ispord(getKey(e.keyCode,e.shiftKey))) {
            var key = getKey(e.keyCode,e.shiftKey);
            // console.log(key);
            var cmdElt = document.getElementById('cmddiv');
            cmdElt.appendChild(makespan(key));
            state.cmd = state.cmd + key;
        }
        e.preventDefault();
        return false;
    };
}

var drawblocks = {"X10Y5":2,"X10Y4":2,"X10Y3":6,"X11Y3":1,"X12Y3":1,"X13Y3":5,"X13Y4":3,"X13Y5":3,"X13Y6":6,"X14Y6":2,"X10Y6":5,"X11Y6":4,"X12Y6":4};

function canvasClick(e) {
    // console.log(e.offsetX);
    // console.log(e.offsetY);
    // console.log(e);
    var blockID = "X" + (0 | (e.offsetX / 20)) + "Y" + (0 | (e.offsetY / 20));
    if (drawblocks[blockID] == 6) {
        delete drawblocks[blockID];
    } else if (drawblocks[blockID]) {
        drawblocks[blockID] += 1;
    } else {
        drawblocks[blockID] = 1;
    }
    clearCanvas();
    drawcard();
    e.preventDefault();
}

function initContext() {
    var canvasElt = document.getElementById('hellocanvas');
    canvasElt.addEventListener("mousedown",canvasClick,false);
    // canvasElt.addEventListener("ondblclick",function () {},false);
    // canvasElt.addEventListener("mousemove",canvasClick,false);
    state.ctx = canvasElt.getContext("2d");
}

function clearCanvas() {
    var ctx = state.ctx;
    ctx.clearRect(0,0,600,600);
}

function incarray(index,limit) {
    var i;
    for (i = 0; i < index.length; i += 1) {
        index[i] += 1;
        if (index[i] == limit[i]) {
            index[i] = 0;
            continue;
        } else {
            break;
        }
    }
}

function drawHeliArray(params, radiuslimit) {
    if (! params instanceof Array) {
        return;
    }
    var innerRadiusA = params[0].split(',');
    var outerRadiusA = params[1].split(',');
    var innerFactorA = params[2].split(',');
    var outerFactorA = params[3].split(',');
    var limit = [innerRadiusA.length, outerRadiusA.length,
        innerFactorA.length, outerFactorA.length];
    var index = [0,0,0,0];
    var ctx = state.ctx;
    var i;
    var n = 180;
    var xOrigin = 150;
    var yOrigin = 150;
    while (1) {
        var innerRadius = innerRadiusA[index[0]];
        var outerRadius = outerRadiusA[index[1]];
        var innerFactor = innerFactorA[index[2]];
        var outerFactor = outerFactorA[index[3]];
        for (i = 0; i < n; i += 1) {
            var innerRadians = innerFactor * 2 * Math.PI * (i / n);
            var outerRadians = outerFactor * 2 * Math.PI * (i / n);
            var x1 = innerRadius * Math.sin(innerRadians) +
                     outerRadius * Math.sin(outerRadians);
            var y1 = innerRadius * Math.cos(innerRadians) +
                     outerRadius * Math.cos(outerRadians);
            innerRadians = innerFactor * 2 * Math.PI * ((i+1) / n);
            outerRadians = outerFactor * 2 * Math.PI * ((i+1) / n);
            var x2 = innerRadius * Math.sin(innerRadians) +
                     outerRadius * Math.sin(outerRadians);
            var y2 = innerRadius * Math.cos(innerRadians) +
                     outerRadius * Math.cos(outerRadians);
            if (x1 * x1 + y1 * y1 > radiuslimit * radiuslimit &&
                    x2 * x2 + y2 * y2 > radiuslimit * radiuslimit) {
                ctx.beginPath();
                ctx.moveTo(xOrigin + x1,yOrigin + y1);
                ctx.lineTo(xOrigin + x2,yOrigin + y2);
                ctx.stroke();
            }
        }
        incarray(index,limit);
        if (index[0] == 0 && index[1] == 0 && index[2] == 0 &&
                             index[3] == 0) {
            break;
        }
    }
}

function shiftdrawblocks(dx,dy) {
    var i;
    var blockKeys = Object.keys(drawblocks);
    var newdrawblocks = {};
    for (i = 0; i < blockKeys.length; i += 1) {
        var blockID = blockKeys[i];
        var x = 0 | blockID.slice(1,blockID.indexOf("Y"));
        var y = 0 | blockID.slice(1 + blockID.indexOf("Y"));
        var newblockID = "X" + (x + dx) + "Y" + (y + dy);
        newdrawblocks[newblockID] = drawblocks[blockID];
    }
    drawblocks = newdrawblocks;
    drawcard();
}

function drawcard() {
    var ctx = state.ctx;
    ctx.beginPath();
    ctx.rect(0,0,600,600);
    ctx.fillStyle = "white";
    ctx.fill();
    var blockKeys = Object.keys(drawblocks);
    var i;
    ctx.lineWidth = "2";
    ctx.beginPath();
    ctx.moveTo(40,40);
    ctx.lineTo(120,40);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(40,40);
    ctx.lineTo(40,120);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(40,120);
    ctx.lineTo(120,120);
    ctx.stroke();

    ctx.beginPath();
    ctx.moveTo(120,40);
    ctx.lineTo(120,120);
    ctx.stroke();

    for (i = 0; i < blockKeys.length; i += 1) {
        var blockID = blockKeys[i];
        var select = drawblocks[blockID];
        var x = 0 | blockID.slice(1,blockID.indexOf("Y"));
        var y = 0 | blockID.slice(1 + blockID.indexOf("Y"));
        // console.log("drawing " + x + "," + y);
        ctx.beginPath();
        // ctx.fillStyle = "black";
        // ctx.rect(20 * x,20 * y,20,20);
        // ctx.fill();
        if (select == 1) {
            ctx.moveTo(20 * x     ,20 * y     );
            ctx.lineTo(20 * x + 20,20 * y     );
        } else if (select == 2) {
            ctx.moveTo(20 * x     ,20 * y     );
            ctx.lineTo(20 * x     ,20 * y + 20);
        } else if (select == 3) {
            ctx.moveTo(20 * x + 20,20 * y     );
            ctx.lineTo(20 * x + 20,20 * y + 20);
        } else if (select == 4) {
            ctx.moveTo(20 * x     ,20 * y + 20);
            ctx.lineTo(20 * x + 20,20 * y + 20);
        } else if (select == 5) {
            ctx.moveTo(20 * x     ,20 * y     );
            ctx.lineTo(20 * x + 20,20 * y + 20);
        } else if (select == 6) {
            ctx.moveTo(20 * x + 20,20 * y     );
            ctx.lineTo(20 * x     ,20 * y + 20);
        }
        ctx.stroke();
    }
}

function drawcardlegacy(ctx) {
    var x1 = 20;
    var y1 = 20;
    var x2 = 40;
    var y2 = 60
    ctx.beginPath();
    ctx.rect(x1,y1,x2 - x1,y2 - y1);
    ctx.fillStyle = "white";
    ctx.fill();

    ctx.beginPath();
    ctx.lineWidth = "2";
    ctx.moveTo(x1,y1);
    ctx.lineTo(x2,y1);
    ctx.lineTo(x2,y2);
    ctx.lineTo(x1,y2);
    ctx.lineTo(x1,y1);
    ctx.stroke();

    ctx.beginPath();
    ctx.lineWidth = "2";
    ctx.moveTo(0,0);
    ctx.lineTo(100,100);
    ctx.stroke();
}

function drawcard2() {
    var x1 = 30;
    var y1 = 30;
    var x2 = 120;
    var y2 = 45
    var ctx = state.ctx;
}

function drawheli() {
    var paramlist = document.getElementById('heliParams').value.split('+');
    var i;
    for (i = 0; i < paramlist.length; i += 1) {
        var radiuslimit = -1;
        var term = paramlist[i];
        if (term.indexOf('[') != -1) {
            radiuslimit = term.slice(term.indexOf('['),term.length);
            var term = term.slice(0,term.indexOf('['));
            radiuslimit = radiuslimit.slice(1,radiuslimit.length-1);
        }
        var params = term.split(';');
        drawHeliArray(params, radiuslimit);
    }
}

var racelaws = [
"Hi,",
"",
"Blacks and jews are pests, pests that should be hunted to",
"extinction. These notes outline my vision for society; there",
"are references to changes in law but no concrete proposals.",
"Just because I want to leave California doesn\'t mean",
"Californians have to keep living in filth. I have concrete",
"ideas for giving Californians a path to freedom, and I\'ve",
"collected these idea in some rough notes.",
"",
"HOW TO SAFELY EUTHANIZE BLACKS AND JEWS IN CALIFORNIA",
"",
"When I think about my life, I realize that blacks and jews",
"at school and work aren\'t really people. They\'re animals.",
"They aren\'t human. They are dodos.",
"",
"The dodos were hunted to extinction.",
"",
"It happened before, so it can happen again. It can be done.",
"We can hunt the blacks and jews to extinction legally,",
"starting with race laws and chattel slavery.",
"",
"We can pretend that we want to turn the blacks and jews into",
"slaves, then put them in chains and forget to give them",
"access to water. They will die of dehydration.",
"",
"Stick a bunch of posts in the ground in a desert somewhere,",
"attach chains to them, put the blacks and jews in the",
"chains, and watch them die. In fact, it can be turned into a",
"reality television program, Pest Control: USA.",
"",
"I think getting the public excited about genocide is a",
"natural first step. This involves circulating media that",
"legitimizes and authorizes genocide and illustrates the",
"operational details of ending the lives of these pests.",
"",
"Cartoons and comics can be used to show children and young",
"adults that pest control is important. The public can be",
"shown the terrible price of allowing pests to infest",
"society.",
"",
"Films can be made depicting the origin of groups that pass",
"laws to legalize pest control.",
"",
"Pest control and genocide can be legalized. I want blacks",
"and jews all over the world to live in fear of Californians.",
"I want blacks and jews to vomit when they think of",
"California. I want them to know the Californians hate them",
"so much that California legalized hunting blacks and jews to",
"extinction. There will be many nonblacks and nonjews who",
"will object. These people are worse than pests, they\'re",
"people who demand that other people live in fear of pests.",
"Either these people can be convinced to abandon their policy",
"of protecting blacks and jews or else they will protect",
"blacks and jews until they die.",
"",
"I think deleting and corrupting DMV and medical records,",
"ransacking the dwellings, and electronic (radio frequency)",
"harassment is an appropriate response to nonblacks and",
"nonjews who object to pest control. These people can\'t be",
"allowed to vote, work, pay taxes, or receive medial care.",
"They\'re worse than pests.",
"",
"There is no need to seize power or make any sudden moves.",
"The plan is to convince people who hold office to change",
"laws that move this agenda forward.",
"",
"I am writing these notes and sending them to you because I",
"want a family. I want to tell my family that I cleaned up",
"California. I don\'t want to tell them that California",
"defeated me and I left. I don\'t want to tell my children",
"that the blacks and jews bullied me so much that I left",
"California.",
"",
"I want the blacks and jews dead. And I want everyone to be",
"delighted that they\'re dead. I want them to feel that pest",
"control will give them a new life.",
"",
"People will be able to leave their homes, take walks, talk",
"with each other, think freely. From the point of view of the",
"way we live now, this will be utopia. Our society will run",
"very differently without these violent monsters and",
"terrorists.",
"",
"I want to clarify and strengthen this message. I want to",
"convince nonblacks and nonjews of the intelligence and",
"wisdom of legally hunting blacks and jews to extinction. I",
"want them to see it as a natural progression of history.",
"",
"Africa can be made safe. There are a bunch of dodos in",
"Africa now. They can be hunted to extinction.  This is a",
"vision I have: freedom. We can be free. I am sick of living",
"in fear, and I am sick of seeing you live in fear.",
"",
"I want the dodos dead. And I want to convince you that the",
"dodos can be put down safely and legally. This is genocide,",
"but people get anxious when they hear the word 'genocide'.",
"People can\'t live in fear of cleaning up their society.",
"That\'s a formula for living in filth.",
"",
"I think the Protestants need to take the initiative and",
"illustrate the reality that the difference between the world",
"of today and a world free of dodos is the difference between",
"degradation and utopia. We live in poverty today, and I am",
"defining a vision of emerging from poverty.",
"",
"This starts with ending civil rights. It starts with",
"creating a second class citizenship for blacks and jews. It",
"starts with race laws. We need to crush the will of the",
"blacks and jews before we put them down. Pest control will",
"be easier if blacks and jews start to commit suicide in",
"large numbers.",
"",
"--David"];

var kfj = [
'I don\'t want kids, I don\'t want friends, and I don\'t',
'want a job.',
'',
'I\'ve had a nasty, horrible life, and I don\'t want kids',
'because I don\'t want to tell them I had a nasty horrible',
'life. I don\'t want to tell them I was a slave and lived in',
'fear my whole life. I hate the people here. I hate my',
'former coworkers. They are monsters. They are life unworthy',
'of life. They are like snails. Murdering these people takes',
'all of the meaning and weight out of the word "murder". It',
'is more like chores or cleaning up the dishes. These human',
'beings are technically "living animals" but from my point',
'of view they\'re pests.',
'',
'I mean it when I say they\'re life unworthy of life. They',
'are people who should be put in concrete. They should be',
'put to death by being placed in wet concrete.',
'',
'I don\'t understand why I live in a society that tolerates',
'them. I don\'t. I thought Americans were more murderous, I',
'thought they would figure out a way to filter out the human',
'trash. I thought we had enough natural born killers to',
'filter out the slime and sludge. As it is, I don\'t want',
'kids because I don\'t want my kids raised around trash',
'people. I don\'t want my kids to think it is ok to be a',
'trash person.',
'',
'When I say "trash person", I mean people like Max Levchin,',
'Keith Rabois, Ray Courtney, Itamar Herzberg. I mean',
'Harvard students. I mean MIT students. I mean Cal',
'students. I mean Stanford students. These are the',
'trash people. Murdering these people isn\'t murder. It',
'carries none of the weight or meaning or significance',
'of murdering an actual, living human being. It\'s a',
'chore. It\'s a bore. It\'s work.',
'',
'I don\'t want kids, I don\'t want friends, I don\'t want a',
'job. I want a team that can plan and execute genocide. I',
'don\'t want "mass murder". I don\'t want attention. If',
'these trash people disappear, that is fine with me. I',
'want empty office buildings, empty campuses, empty coffee',
'shops. If I need company, I\'ll get a pet.'];

var idd1 = [
'Jane was still staring after him when a hand touched her',
'elbow. She whirled. It was the pale man. A cigarette dangled',
'from his mouth. He held an outsized cup of beer in one hand.',
'',
'The pale man looked alarmingly out of place in short pants.',
'His knees were knobby and fish belly white; the sunlight',
'seemed loath to touch them. "I put in your application for',
'scholarship aid through the school secretary," he said. "It',
'won\'t do any good."',
'',
'"What?" she said blankly.',
'',
'He took her arm and strolled her toward the shaded side of',
'the tavern. White-dressed waiters shot through its doors,',
'trays in hand, trailing steam. "How much Grammar do you',
'have?" he asked.',
'',
'Jane shook her head. She had no idea what he was talking',
'about.',
'',
'"It\'s the queen of sciences," he said testily, speaking',
'around his cigarette. "You really ought to—well, never mind.',
'Let me put it this way: There is a logic to the shapes of',
'lives and relationships, and that logic is embedded in the',
'stuff of existence. The lover does not awake one morning',
'convinced he would rather be an engineer. The musician does',
'not abandon her keyboard without regrets. The CEO does not',
'surrender wealth. Or if he does, he will find it easier to',
'give up everything, find a cave in the mountains and become',
'a philosopher than to simply downscale his life-style. You',
'see? We are all of us living stories that on some deep level',
'give us satisfaction. If we are unhappy with our stories,',
'that is not enough to free us from them. We must find other',
'stories that flow naturally from those we have been living."',
'',
'"So you\'re saying… that I\'m living a story in which I don\'t',
'get financial aid? Is that it?"',
'',
'He shook his head. "It\'s not you. The secretary is living a',
'story in which she doesn\'t give you financial aid. It\'s a',
'subtle distinction, but a crucial one. It gives you an out."',
'',
'"What do I have to do?"',
'',
'"You have to look at yourself through her eyes. She sees a',
'troublemaker, a dilatory student, someone with',
'\'potential\'—whatever that might be—who is lazy, who will',
'never apply herself, who neglects her studies, and on whom a',
'scholarship would be wasted."',
'',
'"But I\'m not like that!"',
'',
'"What does that matter? In her story that\'s who you are, and',
'in her story your sort rarely changes. Occasionally, though,',
'it happens. Your low qualities are channeled for low',
'purposes. Strawwe used to be just like you before he',
'snitched on his friends."',
'',
'"What? I wouldn\'t!"',
'',
'The pale man had smoked his cigarette down to the filter. He',
'lit a new one from the coal, and ate the butt. "You\'ll have',
'to weigh the alternatives. On the one hand it\'s an',
'unpleasant story to live. Your former friends will despise',
'you and they may even beat you. You won\'t respect yourself.',
'On the other hand, people you like don\'t get scholarships.',
'You can keep your own story or you can get a doctorate in',
'alchemy. But you can\'t do both.  "Think about it."',
'',
'His speech done, the pale man looked away.'
];

var poem1 = [ "Terrorists vs. Taxpayers",
        " ",
        "Suppose I am a taxpayer and a terrorist",
        "That means I have to pay taxes to the NSA",
        "And once I do that, the NSA will treat me",
        "Like a terrorist, steal from me, and call",
        "Me names because the NSA wants me dead",
        " ",
        "Why shouldn't I do everything in my power",
        "To get people in the NSA social network",
        "To commit suicide as fast as possible?",
        "The faster they commit suicide, the sooner",
        "I can stop paying taxes, the sooner",
        "All of the bullies who called me names will",
        "Be dead, and their families dead too",
        " ",
        "Oh I'm sorry, did I break your concentration?",
        " ",
        "If you are a bully who called me a terrorist",
        "I want you to commit suicide",
        "I want you to kill your kids and parents first though",
        " ",
        "You want me to pay taxes",
        "With the monopoly money you made?",
        "I want you to pay taxes with the lives",
        "Of your kids and parents",
        " ",
        "It's a central bank",
        "But we don't deal in paper",
        "We deal in the dead" ];

var poem2 = [ "Terrorists vs. Taxpayers",
        " ",
        "Suppose I     am         a     taxpayer and   a     terrorist",
        "That    means I          have  to       pay   taxes to        the   NSA",
        "And     once  I          do    that,    the   NSA   will      treat me",
        "Like    a     terrorist, steal from     me,   and   call",
        "Me      names because    the   NSA      wants me    dead",
        " ",
        "Why shouldn't I       do      everything in     my        power",
        "To  get       people  in      the        NSA    social    network",
        "To  commit    suicide as      fast       as     possible?",
        "The faster    they    commit  suicide,   the    sooner",
        "I   can       stop    paying  taxes,     the    sooner",
        "All of        the     bullies who        called me        names   will",
        "Be  dead,     and     their   families   dead   too",
        " ",
        "Oh I'm sorry, did I break your concentration?",
        " ",
        "If you  are a  bully  who     called me  a       terrorist",
        "I  want you to commit suicide",
        "I  want you to kill   your    kids   and parents first     though",
        " ",
        "You  want me       to    pay     taxes",
        "With the  monopoly money you     made?",
        "I    want you      to    pay     taxes with the lives",
        "Of   your kids     and   parents",
        " ",
        "It's a    central bank",
        "But  we   don't   deal in   paper",
        "We   deal in      the  dead" ];


function chaosbot() {
    updateHello("topic/nominate : 8 hours : 1 period : [A]");
    updateHello("primary/renominate : 48 hours : 6 periods : [B,C,D,E,F,G]");
    updateHello("secondary/test : 48 hours : 6 periods : [H,I,J,K,L,M]");
    var periodNames = ['A','B','C','D','E','F','G','H','I','J','K','L','M'];
    var now = new Date();
    var nowMinutes = now.getMinutes();
    if (nowMinutes < 10) {
        nowMinutes = "0" + nowMinutes;
    } else {
        nowMinutes = "" + nowMinutes;
    }
    var nowHours = now.getHours();
    var nowAMPM;
    if (nowHours > 12) {
        nowHours -= 12;
        nowAMPM = 'PM';
    } else {
        nowAMPM = 'AM';
    }
    if (nowHours < 10) {
        nowHours = "0" + nowHours;
    } else {
        nowHours = "" + nowHours;
    }
    updateHello("" + nowHours + ":" + nowMinutes + " " + nowAMPM);
    var init = new Date();
    init.setMilliseconds(0);
    init.setSeconds(0);
    init.setMinutes(0);
    init.setHours(17);
    init.setMonth(5);
    init.setDate(21);
    var roundMilliseconds = 104 * 60 * 60 * 1000;
    var offset = 0;
    if (now - init <= 0) {
        now.setTime(now.getTime() + roundMilliseconds);
        offset -= 1;
    }
    var roundIndex = (now - init) / roundMilliseconds;
    var periodIndex = 13 * (roundIndex - Math.trunc(roundIndex));
    var fractionalPeriod = 1000 * (periodIndex - Math.trunc(periodIndex));
    updateHello("Round " + (offset + Math.trunc(roundIndex)));
    updateHello("Period " + periodNames[Math.trunc(periodIndex)]);
    updateHello("Fractional Period " + Math.trunc(fractionalPeriod) + " (1000)");
}

function sayhello(content, broadcast) {
    if (content == "gold") {
        updateHello("jewish folk tales");
    }
    if (content == "USN") {
        updateHello("United States of Nonmanichaea");
    }
    if (content == "mutagen") {
        updateHello("Chomsky analyzes the sense in which grammar is generative");
    }
    if (content == "usa") {
        updateHello("usa wants me dead");
        updateHello("");
        updateHello("or raising pests who will never be men or women");
        updateHello("");
        updateHello("you are all fucked up and dead");
        updateHello("");
        updateHello("you are all fucked up and dead");
    }
    if (content == "9/11") {
        updateHello("British attack followed by British subversion");
    }
    if (content == "chaosbot") {
        chaosbot();
    }
    if (content == "00") {
        clearHello();
        state.mode = '00';
        return;
    }
    if (content == "0000") {
        clearHello();
        state.mode = '0000';
        return;
    }
    if (content == "clear") {
        clearHello();
        return;
    }
    if (content == "reload") {
        location.reload();
    }
    if (content == "heli") {
        attachheli();
        return;
    }
    if (content == "bwaapm2") {
		updateHello("Bot Will Accept Anything Package Manager : the Democratic Package Manager");
		updateHello("");
		updateHello("- configure the bot to accept pull requests that add a compatible package to the pkg/ directory");
		updateHello("  anyone may allocate a new pkg/ directory; at the time of allocation, the github user who");
		updateHello("  allocated the package is given an exclusive right to update it at any point in the future");
		updateHello("  with the following provision: all content must reside in a subdirectory pkg/PACKAGE/VERSION");
		updateHello("  and each version is frozen at the time it is created; therefore additional pull requests");
		updateHello("  sent to the bot may only add additional versions (snapshots) to the pkg/PACKAGE directory.");
		updateHello("");
		updateHello("Problem: neither git nor github is set up to handle a large number of packages.");
		updateHello("");
		updateHello("In order to resolve this problem, the bot will have to use the filesystem pkg/PACKAGE/VERSION");
		updateHello("as a cache for a database that contains all versions of all packages.");
		updateHello("");
		updateHello("- configure the bot to use AWS for the package database");
    }
    if (content == "bwaapm") {
        updateHello("BWAAPM gives you");
        updateHello("");
        updateHello("- a subdomain named after your account name");
        updateHello("- three GIT repositories:");
        updateHello("  - a repository for code");
        updateHello("  - a repository for formulas (contracts)");
        updateHello("  - a repository for configuration (the syntax of each file)");
        updateHello("- commits to the code repo can be anything");
        updateHello("- commits to the formula repo must be 'forward commits' that is, it is only possible to");
        updateHello("  append lines to files, no editing or deleting of formula content allowed");
        updateHello("- each file in the formula repository is of the form");
        updateHello("  [FORMULA]");
        updateHello("      line");
        updateHello("      line");
        updateHello("  ...");
        updateHello("  where [FORMULA] is the name of a formula and each line of formula text is indented");
        updateHello("  (each line of formula text must begin with some combination of spaces and tabs of nonzero length,");
        updateHello("  in regular expression syntax each formula line must match (\\t| )+[^#]+ a hash character (#)");
        updateHello("  begins a comment; comment lines or partial lines are removed before processing. Comments are");
        updateHello("  subject to the same forward commit policy as other content in the formula repository.");
        updateHello("- the ability to configure the package front page (http://package.anythingbot.org) by adding");
        updateHello("  a green light / red light indicator for any formula in the formula repository");
        updateHello("- each formula in the formula repository represents a test or property of a revision of");
        updateHello("  the code repository");
        updateHello("- each time a new revision is pushed to the code repository, BWAAPM determines which formulas");
        updateHello("  in the formula repository the revision satisfies");
        updateHello("- the formulas for a given package are listed at package.anythingbot.org/formulas");
        updateHello("- BWAAPM provides a matrix of formulas and revisions, with a 1 (with green background) in the");
        updateHello("  entry if the revision satisfies the formula and a 0 (with red background) in the entry if");
        updateHello("  the revision does not satisfy the formula");
        updateHello("- formulas are written in the chapter 4 logic programming language");
        updateHello("- each formula takes the content of the entire revision as argument");
        updateHello("- before formulas are computed, each file is parsed, producing a syntax tree");
        updateHello("- each formula takes two arguments: the entire revision of the text of the repository files");
        updateHello("  as well as a translated version of the repository that replaces each file with a syntax tree");
        updateHello("- the syntax of each file is configured in configuration repository");
        updateHello("- an internal (not accessible outside the BWAAPM interface) GIT repository for configuration");
        updateHello("- the language of a file may be changed at will by using the BWAAPM interface [1]");
        updateHello("- documentation can be parsed and translated in order to verify a condition such as:");
        updateHello("  'each function in a file in src/* is documented in some file in doc/*'");
        updateHello("- a parser for a subset of the C programming language");
        updateHello("");
        updateHello("[1] BWAAPM will commit a change to the internal configuration repository in response to");
        updateHello("an order to change the package configuration from the interface; this will likely cause");
        updateHello("any formula that depends on the syntax tree of that file to not hold; in order to compensate,");
        updateHello("new formulas may have to be added that take into account the new syntax of the file");
    }
    if (content == "deploy") {
        updateHello("");
        updateHello(" #. set root password");
        updateHello(" #. delete local .ssh known_hosts identification");
        updateHello(" #. connect with ssh and enter root password");
        updateHello(" #. apt-get update");
        updateHello(" #. apt-get upgrade");
        updateHello(" #. adduser anythingbot");
        updateHello(" #. apt-get install vim");
        updateHello(" #. apt-get install git");
        updateHello(" #. iptables -A PREROUTING -t nat -p tcp --dport 80 -j REDIRECT --to-port 3000");
        updateHello(" ");
        updateHello(" #. connect with ssh and enter anythingbot password");
        updateHello(" #. clone house");
        updateHello(" #. move house id_rsa and id_rsa.pub (ssh identification) in house/DOTssh to .ssh/");
        updateHello(" ");
        updateHello("         AS ROOT");
        updateHello(" #. apt-get install screen");
        updateHello(" #. apt-get install build-essential");
        updateHello(" #. apt-get install libssl-dev");
        updateHello(" #. apt-get install curl");
        updateHello(" #. curl -sL https://deb.nodesource.com/setup_6.x | sudo bash -");
        updateHello(" #. apt-get install nodejs");
        updateHello(" ");
        updateHello("                 AS anythingbot");
        updateHello(" ");
        updateHello(" #. cd ~");
        updateHello(" #. mkdir config");
        updateHello(" #. cp house/config/* config/");
        updateHello(" #. cd anythingbot");
        updateHello(" #. npm install");
        updateHello(" #. npm update");
        updateHello(" #. screen");
        updateHello(" #. node launcher.js");
        updateHello(" ");
        updateHello(" = RESTART THE BOT =");
        updateHello(" ");
        updateHello(" #. screen -r");
        updateHello(" #. killall node ; node launcher.js");
        updateHello(" = References =");
        updateHello("http://linuxbsdos.com/2017/06/26/how-to-install-node-js-lts-on-debian-9-stretch/");
        updateHello("<a href=\"http://linuxbsdos.com/2017/06/26/how-to-install-node-js-lts-on-debian-9-stretch/\">How to install Node.js LTS on Debian 9 stretch</a>",1);
    }
    if (content == "nuke") {
        updateHello("Israel");
    }
    if (content == "body") {
        updateHello("Mybody.com");
        updateHello("");
        updateHello("Show off your body!");
        updateHello("");
        updateHello("- Live Streaming");
        updateHello("- Rules");
        updateHello("- ???");
        updateHello("- Profit!");
        updateHello("");
    }
    if (content == "rand") {
        updateHello("<div style=\"color : white\">I will not kill you</div>",1);
        updateHello("<div style=\"color : white\">I will spend energy to kill you</div>",1);
        updateHello("<div style=\"color : red\">(moment)</div>",1);
        updateHello("<div style=\"color : black\">I will not let others feed you</div>",1);
        updateHello("<div style=\"color : black\">I will not let others spend energy feeding you</div>",1);
        document.body.style.backgroundColor = "#673695";
    }
    if (content == "airbnb") {
        updateHello("CIA whorehouse");
    }
    if (content == "psychology") {
        updateHello("gold bug science");
    }
    if (content == "psychopath") {
		updateHello("I am getting sick of living with psychopaths");
		updateHello("The psychopaths in America are sick and need to be put down");
		updateHello("America has a psychopath problem");
		updateHello("I have three choices: live with it, do something about it, or move away");
		updateHello("I am sick of living with these nasty animals and pretending they are people");
		updateHello("What can I do? Psychopaths control the laws, the police, the internet.");
		updateHello("It is hopeless. The only reasonable option I have is to move away.");
		updateHello("The psychopaths won. We lost. It is hopeless to try to live in America.");
		updateHello("I want you to see getting out of a place filled with nasty animals as a good thing.");
    }
    if (content == "gold bug stuff") {
        updateHello("trading gold bug money for pussy ass mouth");
    }
    if (content == "dollar") {
        updateHello("gold bug money");
    }
    if (content == "life") {
        updateHello("circulating gold bug money");
    }
    if (content == "cron") {
		updateHello("Anythingbot cron");
		updateHello("");
		updateHello("The first cron job is as follows: make progress on the anythingbot history project.");
		updateHello("");
		updateHello("The anythingbot history project exists to document the history of lib/media.js.");
		updateHello("");
		updateHello("The lib/media.js file exists for some versions of the anythingbot,");
		updateHello("going back to its introduction with bot will accept anything television BWAA TV");
		updateHello("");
		updateHello("Progress in the project is recorded in the ahp/ directory.");
		updateHello("");
		updateHello("Periodically, the bot will make progress on this project by cloning the repository");
		updateHello("into a temporary directory, /tmp/ahp-YYYY-MM-DD/ where YYYY-MM-DD is the current");
		updateHello("year, month, and date, if it does not already exist there, checking out a revision,");
		updateHello("checking to see if lib/media exists in the revision, and if so, copying it to");
		updateHello("ahp/YYYY-MM-DD/HH-MM-SS/lib/media.js where YYYY-MM-DD is the year, month, and date");
		updateHello("the commit was made and HH-MM-SS is the hour, minute, and second the commit was made.");
		updateHello("Doing this once is a single 'step'.");
		updateHello("");
		updateHello("The variable in working on a step is the commit, represented by a commit hash or point");
		updateHello("in time, the time the commit was made.");
		updateHello("");
		updateHello("The bot records how much clock time was spent on making progress in a single step in");
		updateHello("the media.ahp object. This object has a key for each step, and media.ahp[KEY].status");
		updateHello("records the status of the step named by KEY, the commit hash. The status transition");
		updateHello("diagram is {(new,active),(active,error),(active,term)}. The initial status is 'new'.");
    }
    if (content == "repeat") {
		updateHello("Anythingbot repeat");
		updateHello("");
		updateHello("The anythingbot will repeat a special N times with the command");
		updateHello("");
		updateHello("repeat N SPECIAL");
		updateHello("");
		updateHello("where SPECIAL is the name of the special.");
	}
    if (content == "zfc") {
        updateHello("the force");
    }
    if (content == "hpm") {
        updateHello("Hierarchical package manager (hpm)");
        updateHello("");
        updateHello("The hpm package manager is based on the idea that a package");
        updateHello("is useful because it satisfies a service condition. A");
        updateHello("service condition is a formula that describes a property of");
        updateHello("a package. For example, a service condition may be, 'this");
        updateHello("package parses and executes Scheme programs'.  Since there");
        updateHello("are both multiple implementations of and multiple standards");
        updateHello("for the Scheme programming language, this sentence does not");
        updateHello("have a precise mathematical translation; that is, the");
        updateHello("process for standardizing mathematical terms rejects 'parses");
        updateHello("and executes Scheme programs' as a name of a formula, and");
        updateHello("furthermore, any mathematician, programmer, or computer");
        updateHello("scientist who reads such a sentence may think, 'this can't");
        updateHello("possibly be the name of a formula because the political");
        updateHello("process that could have fixed and communicated the");
        updateHello("definition of what is and is not a Scheme program instead");
        updateHello("decided to define multiple standards.'");
        updateHello("");
        updateHello("In order to adapt to the reality of vague definitions, the");
        updateHello("HPM database is organized as a tree of nodes, each node");
        updateHello("bearing a label, formula, or implementation. Each label node");
        updateHello("represents an idea that may be made into a precise");
        updateHello("mathematical formula, not necessarily in an unambiguous way,");
        updateHello("together with axioms of set theory that can be used to");
        updateHello("formalize it, usually ZF or ZFC. For example, 'this package");
        updateHello("parses and executes Scheme programs' is a label. Each");
        updateHello("formula node represents a set of logically equivalent");
        updateHello("formulas. For example, 'this package parses and executes");
        updateHello("R5RS Scheme programs' is a formula of one free variable, the");
        updateHello("package variable. Each implementation node represents an");
        updateHello("implemented program.  The child nodes of label nodes may be");
        updateHello("label nodes and formula nodes; the child nodes of formula");
        updateHello("nodes may be formula nodes and implementation nodes;");
        updateHello("implementation nodes are leaf nodes.");
        updateHello("");
        updateHello("Definition. An encoded character is an integer in the set");
        updateHello("{32,...,126}. Given a set X, let X^* be the set of finite");
        updateHello("tuples in X. Let St = {32,...,126}* be the set of finite");
        updateHello("tuples of encoded characters. Let Ax be the set of all");
        updateHello("subsets of first order sentences of signature {<-}. The");
        updateHello("symbol [*] means 'contradiction' or 'false'. For a set x,");
        updateHello("let P(x) be the power set of x.");
        updateHello("");
        updateHello("Definition. An hpm database is a tuple (N,C,t,d,p,L,theta)");
        updateHello("where");
        updateHello("");
        updateHello(" - N is a set of nodes");
        updateHello(" - C is a binary relation on N such that for all n,k <- N, n");
        updateHello("   is the parent node of k iff (n,k) <- C");
        updateHello("");
        updateHello("and t,d,p,L, and theta are functions");
        updateHello("");
        updateHello(" - t : N -> {'label','formula','implementation'}");
        updateHello(" - d : N -> St");
        updateHello(" - p : {n <- N : t(n) <- {'label','formula'}} -> Ax");
        updateHello(" - L : N -> P(St)");
        updateHello(" - theta : N x St -> Ax");
        updateHello("");
        updateHello("such that t picks the node type of its argument, d gives");
        updateHello("the label, formula, or implementation for its argument");
        updateHello("according to the type of its argument, p gives the axioms");
        updateHello("for its argument, L gives the signature, theta gives the");
        updateHello("explicit definitions of the defined symbols, and the");
        updateHello("following conditions hold:");
        updateHello("");
        updateHello(" - a type condition on descendants");
        updateHello(" - a consistency condition on nodes");
        updateHello(" - an axiom extension condition on descendants");
        updateHello(" - an symbol extension condition on descendants");
        updateHello(" - a Liskov condition on descendants");
        updateHello("");
        updateHello("These conditions are explained in detail below.");
        updateHello("");
        updateHello("Let N be an hpm database. The type condition is for all");
        updateHello("n,k <- N such that (n,k) <- C, (t(n),t(k)) <-");
        updateHello("{('label', 'label'),('label', 'formula'),('formula',");
        updateHello("'formula'),('formula', 'implementation')}.");
        updateHello("");
        updateHello("The consistency condition is for all n <- N, the axioms");
        updateHello("of n do not imply a contradiction, in symbols p(n) |/= [*],");
        updateHello("and if t(n) = 'formula', there exists x such that n(x).");
        updateHello("");
        updateHello("The axiom extension condition is for all n,k <- N such that");
        updateHello("(n,k) <- C, both (1) and (2) hold");
        updateHello(" (1) if t(n) = t(k) = 'label', then p(k) <= p(n)");
        updateHello(" (2) if t(n) != 'label' or t(k) != 'label', then p(k) = p(n)");
        updateHello("");
        updateHello("The symbol extension condition is for all n,k <- N such that");
        updateHello("(n,k) <- C,");
        updateHello(" (1.a) if t(n) = t(k) = 'formula', then for all symbols");
        updateHello("       s <- L(k) \ L(n), p(n) |- theta(k,s)");
        updateHello(" (2.a) if t(n) != 'formula' or t(k) != 'formula', then");
        updateHello("       L(k) = L(n)");
        updateHello("");
        updateHello("The Liskov substitution condition is for all n,k <- N, if");
        updateHello("(n,k) <- C then n is a k,");
        updateHello(" (1.b) if t(n) = 'label' and t(k) = 'formula', then");
        updateHello("       p(n) |- exists x k(x)");
        updateHello(" (2.b) if t(n) = 'formula' and t(k) = 'formula', then");
        updateHello("       p(n) |- for all x k(x) -> n(x)");
        updateHello(" (3.b) if t(n) = 'formula' and t(k) = 'implementation',");
        updateHello("       then p(n) |- n(k)");
        updateHello("");
        updateHello("The conditions that define the axiomatizable class of hpm");
        updateHello("databases is summarized in the table below, where L stands");
        updateHello("for 'label', F for 'formula', and I for 'implementation'");
        updateHello("");
        updateHello("+-------------------------------------------------------+");
        updateHello("|                                                       |");
        updateHello("|                                                       |");
        updateHello("|     n | k | Type | Axiom        | Symbol              |");
        updateHello("+-------+---+------+--------------+---------------------+");
        updateHello("|     L | L | Yes  | p(k) <= p(n) | L(n) = L(k)         |");
        updateHello("|     L | F | Yes  | p(n) = p(k)  | L(n) = L(k)         |");
        updateHello("|     F | F | Yes  | p(n) = p(k)  | L(n) <= L(k)        |");
        updateHello("|     F | I | Yes  | p(n) = p(k)  | L(n) = L(k)         |");
        updateHello("|                                                       |");
        updateHello("|                                                       |");
        updateHello("|                                                       |");
        updateHello("|                                                       |");
        updateHello("|     n | k | Type | n is a k                           |");
        updateHello("+-------+---+-------------------------------------------+");
        updateHello("|     L | L | Yes  |                                    |");
        updateHello("|     L | F | Yes  | p(n) |- exists x k(x)              |");
        updateHello("|     F | F | Yes  | p(n) |- for all x k(x) -> n(x)     |");
        updateHello("|     F | I | Yes  | p(n) |- n(k)                       |");
        updateHello("|     L | I | No                                        |");
        updateHello("|     F | L | No                                        |");
        updateHello("|     I | ? | No                                        |");
        updateHello("|                                                       |");
        updateHello("|                                                       |");
        updateHello("+-------------------------------------------------------+");
    }
    if (content == "hell") {
        updateHello("gold bug story");
    }
    if (content == "420") {
		updateHello("there are two kinds. The kind that gets you high, and the kind that makes");
		updateHello("you not upset that you aren't high. The second kind, when given to the naive user,");
		updateHello("barely registers. It takes a fairly high level of insight into your own mental");
		updateHello("process to detect. You could say it is a mild tranquilizer or sedative; don't take");
		updateHello("it if you plan to operate heavy equipment in the next few hours. The kind that gets");
		updateHello("you high, of course, tends to put you in a frame of mind where you recall the");
		updateHello("experience of being high, and that's rather annoying. The kind of weed that makes");
		updateHello("you not upset that you aren't high, and leaves you in a frame of mind where you");
		updateHello("recall the experience of not being upset that you aren't high, is an antidote.");
    }
    if (content == "zuck") {
        updateHello("I will not live in fear of a gold bug");
        return;
    }
    if (content == "reddit") {
		updateHello("The NPM investors owe the node.js community an explanation for Mr. Schlueter's");
		updateHello("behavior, which is bizarre in the extreme.  Right now, Schlueter is looking");
		updateHello("like a traitor to the open source movement; open source conference organizers");
		updateHello("should look into banning all NPM employees and investors until Isaac apologizes");
		updateHello("and the node.js open source community accepts that apology.  The open source");
		updateHello("movement cannot have rogue elements who create a hostile environment. It is");
		updateHello("unethical and frankly the kind of thing you expect from rotten scum and");
		updateHello("criminals.  Isaac Schlueter is scum, and the node.js community needs to protect");
		updateHello("itself from filth like him.");
    }
    if (content == "dukkha") {
        updateHello("dukkha : death and suffering");
        return;
    }
    if (content == "teen") {
        updateHello("<a href=\"http://www.pbs.org/wgbh/pages/frontline/shows/cool/etc/script.html\">They look at the teen market as part of this massive empire that they're colonizing. Teens are like Africa.</a>",1);
        return;
    }
    if (content == "category") {
        updateHello("zen math");
    }
    if (content == "math") {
        updateHello("insist on wide latitude in the study of contradictions");
        return;
    }
    if (content == "poem") {
        var poem;
        if (state.mode == '00') {
            poem = poem2;
        } else {
            poem = poem1;
        }
        var i;
        for (i = 0; i < poem.length; i += 1) {
             updateHello(poem[i]);
        }
    }
    if (content == "child") {
        updateHello("MK-ULTRA test subject");
    }
    if (content == "racelaws") {
        var i;
        for (i = 0; i < racelaws.length; i += 1) {
             updateHello(racelaws[i]);
        }
    }
    if (content == "grammar") {
        var i;
        for (i = 0; i < idd1.length; i += 1) {
            updateHello(idd1[i]);
        }
    }
    if (content == "fbi") {
        updateHello("the fbi is getting VICE News to recruit people,");
        updateHello("turn them into psychopaths, and train them to hunt me down and kill me");
    }
    if (content == "kids") {
        var i;
        for (i = 0; i < kfj.length; i += 1) {
            updateHello(kfj[i]);
        }
    }
    if (content == "code") {
        imgHello("https://my.mixtape.moe/xmajtr.png");
    }
    if (content == "boat") {
        imgHello("http://anythingbot.org/anythingboat.JPG",450);
    }
    if (content == "Stanford") {
        updateHello("Google");
    }
    if (content == "depression") {
		updateHello("people with depression need to get serious about inflicting psychological");
		updateHello("wounds on jew children that are permanent and cannot be treated, for example");
		updateHello("by lobbying their jurisdictions to legalize putting dog collars on jews that");
		updateHello("shock them periodically");
		updateHello("sadistically torturing jews is fun, so the idea is to add wireless transmitters");
		updateHello("to the shock collars and connect them to a website");
		updateHello("feeling down? just pick a jew and start sending shocks to the collar");
		updateHello("connect it to a surveillance system that monitors the location of all jews at");
		updateHello("all times");
		updateHello("if your jew is in front of a camera, you can watch it get shocked!");
		updateHello("there is no such thing as a depression that cannot be treated this way because");
		updateHello("a jew calls someone depressed in order to attack and infect that person");
		updateHello("a jew child who is hurt with this weapon will live and die as a slave");
		updateHello("in pain, hopeless and powerless, afraid of future shocks");
    }
    if (content == "Google") {
        updateHello("Chrome");
    }
    if (content == "Chrome") {
        updateHello("Javascript");
    }
    if (content == "Javascript") {
        updateHello("V8");
    }
    if (content == "V8") {
        updateHello("Node");
    }
    if (content == "Node") {
        updateHello("Node Package Manager");
    }
    if (content == "Node Package Manager") {
        updateHello("Isaac Schlueter");
    }
    if (content == "Isaac Schlueter") {
        updateHello("Antifa");
    }
    if (content == "Antifa") {
        updateHello("BAMN");
    }
    if (content == "BAMN") {
        updateHello("Yvette Felarca");
    }
    if (content == "bitcoin") {
        updateHello("codec mania");
    }
    if (content == "evil") {
        updateHello("Jewish adjective");
    }
    if (ws.readyState != WebSocket.OPEN) {
        console.log("websocket is closed");
        return;
    }
    if (!content) {
        content = 'hello';
    }
    if (broadcast) {
        broadcast = 1;
    } else {
        broadcast = 0;
    }
    var data = {
        content: content,
        broadcast: broadcast
    };
    ws.send(JSON.stringify(data));
}

        </script>
        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
        <title>Bot Will Accept Anything</title>
        <meta name="author" content="Sync Music Video">
        <link rel="stylesheet" type="text/css" href="/css/media.css" />
    </head>
    <body id="BodyConsole" onload="pageLoaded()"><h1 id="HeaderConsole">Websockets hello world</h1>

    <div class="Content">
        {{{body}}}
    </div>
    </body>
</html>
