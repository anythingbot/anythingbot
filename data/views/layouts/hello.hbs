<!DOCTYPE html>
<html>
    <head>
        <link rel="icon" type="image/ico" href="/favicon.ico?raw=true">
        <script src="https://code.jquery.com/jquery-2.1.3.min.js"></script>
        <script src="/js/lib/cookie.js"></script>
        <script>

function imgHello(src,width) {
    var imgElt = document.createElement("img");
    imgElt.src = src;
    document.getElementById('hellodiv').appendChild(imgElt);
    if (width) {
        imgElt.width = width;
    }
}

function updateHello_impl(hellomsg, eltType, hasMarkup) {
    var i;
    var terminals;
    if (state.mode == '0000') {
        terminals = [
            [document.getElementById('l0000'),null],
            [document.getElementById('r0000'),"color : red"]
        ];
    } else {
        terminals = [[document.getElementById('hellodiv'),null]];
    }
    for (i = 0; i < terminals.length; i += 1) {
        var helloElt = document.createElement(eltType);
        var j;
        var hellomsg2 = [];
        for (j = 0; j < hellomsg.length; j += 1) {
            if (hasMarkup || hellomsg[j] != ' ') {
               hellomsg2.push(hellomsg[j]);
            } else {
               hellomsg2.push('&nbsp;');
            }
        }
        hellomsg = hellomsg2.join('');
        helloElt.innerHTML = hellomsg;
        if (state.mode == "00") {
            helloElt.style = "color : red;";
        }
        // add style
        if (terminals[i][1]) {
            helloElt.style = terminals[i][1];
        }
        terminals[i][0].appendChild(helloElt);
    }
}

function updateHello(hellomsg,hasMarkup) {
    updateHello_impl(hellomsg, 'div',hasMarkup);
}

function updateHelloSpan(hellomsg) {
    updateHello_impl(hellomsg, 'span');
}

function clearHello() {
    state.mode = '';
    var terminals = [
        document.getElementById('hellodiv'),
        document.getElementById('l0000'),
        document.getElementById('r0000')
    ];
    var i;
    for (i = 0; i < terminals.length; i += 1) {
        var elt = terminals[i];
        while (1) {
            if (elt.children.length == 0) {
                break;
            }
            elt.removeChild(elt.children[0]);
        }
    }
}

var countdownStarted = 0;
var countdown;

var reloadCountdown = function () {
    updateHelloSpan('&nbsp;' + countdown);
    if (countdown == 0) {
        location.reload();
    } else {
        countdown -= 1;
        setTimeout(reloadCountdown, 1000);
    }
};

var host = window.document.location.host.replace(/:.*/, '');
var ws = new WebSocket('ws://' + host + ':3010');
window.addEventListener('beforeunload',function () { ws.close(); });
ws.onmessage = function (event) {
    var msg = JSON.parse(event.data).content;
    if (msg.substring(0,"new opentime".length) == "new opentime") {
        // new opentime HANDLE TAG TIME
        // TIME format is Date.now()
        var args = msg.substring("new opentime ".length,msg.length);
        var argArray = args.split(" ");
        setCookie("opentime",argArray[2],14);
    }
    if (msg == "a client said: restart" && (! countdownStarted)) {
        countdownStarted = 1;
        countdown = 15;
        updateHelloSpan('reloading in');
        reloadCountdown();
    } else {
        updateHello(msg);
    }
};



// HUMAN: enter your handle into the HTML element handleInput and press the
//        setHandle() button to set your handle
function setHandle() {
    var handleString = document.getElementById('handleInput').value;
    setCookie("handle",handleString,365);
}

function getHandle() {
    var handleString = getCookie("handle");
    var elt = document.getElementById('handleInput');
    elt.value = handleString;
}

// HUMAN: enter your tag into the HTML element tagInput and press the setTag()
//        button to set your file tag
function setTag() {
    var tagString = document.getElementById('tagInput').value;
    setCookie("tag",tagString,14);
}

function getTag() {
    var tagString = getCookie("tag");
    var elt = document.getElementById('tagInput');
    elt.value = tagString;
}

// HUMAN: set your handle, set your tag, and press newOpentime() to open a new
// file with the given tag
function newOpentime() {
    sayhello("new opentime " + getCookie("handle") + " " + getCookie("tag"));
}

function setOpentime() {
    var opentimeString = document.getElementById('opentimeInput').value;
    setCookie("opentime",opentimeString,14);
}

function getOpentime() {
    var opentimeString = getCookie("opentime");
    var elt = document.getElementById('opentimeInput');
    elt.value = opentimeString;
}

var chrLookup = [
    '', '', '', '', '', '', '', '', '', '\t', '\n', '', '', '', '', '',
    '', '', '', '', '', '', '', '', '',   '',   '', '', '', '', '', '',
    ' ', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.',
    '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
    '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
    'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[',
    '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
    'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
    'z', '{', '|', '}', '~'];

function chr(n) {
    if (n == 9 || n == 10 || (n >= 32 && n <= 126)) {
        return chrLookup[n];
    } else {
        throw new Error("chr: invalid character");
    }
}

function ispchr(n) {
    return (n >= 33 && n <= 126);
}

function ischr(n) {
    return (n == 9 || n == 10 || (n >= 32 && n <= 126));
}

function pchr(n) {
    if (n >= 33 && n <= 126) {
        return chrLookup[n];
    } else {
        throw new Error("pchr: invalid character");
    }
}

var ordLookup = {
    ' ': 32, '$': 36, '(': 40, ',': 44, '0': 48, '4': 52, '8': 56, '<': 60,
    '@': 64, 'D': 68, 'H': 72, 'L': 76, 'P': 80, 'T': 84, 'X': 88, '\\': 92,
    '`': 96, 'd': 100, 'h': 104, 'l': 108, 'p': 112, 't': 116, 'x': 120,
    '|': 124, '#': 35, "'": 39, '+': 43, '/': 47, '3': 51, '7': 55, ';': 59,
    '?': 63, 'C': 67, 'G': 71, 'K': 75, 'O': 79, 'S': 83, 'W': 87, '[': 91,
    '_': 95, 'c': 99, 'g': 103, 'k': 107, 'o': 111, 's': 115, 'w': 119,
    '{': 123, '\n': 10, '"': 34, '&': 38, '*': 42, '.': 46, '2': 50, '6': 54,
    ':': 58, '>': 62, 'B': 66, 'F': 70, 'J': 74, 'N': 78, 'R': 82, 'V': 86,
    'Z': 90, '^': 94, 'b': 98, 'f': 102, 'j': 106, 'n': 110, 'r': 114,
    'v': 118, 'z': 122, '~': 126, '\t': 9, '!': 33, '%': 37, ')': 41,
    '-': 45, '1': 49, '5': 53, '9': 57, '=': 61, 'A': 65, 'E': 69, 'I': 73,
    'M': 77, 'Q': 81, 'U': 85, 'Y': 89, ']': 93, 'a': 97, 'e': 101, 'i': 105,
    'm': 109, 'q': 113, 'u': 117, 'y': 121, '}': 125
};

// look up character c in the character->ordinal chart
function ord(c) {
    if (ordLookup[c]) {
        return ordLookup[c];
    } else {
        throw new Error("ord: invalid code");
    }
}

// is it possible to look up character c in the character->ordinal chart?
function isord(c) {
    return (!! ordLookup[c]);
}

function ispord(c) {
    return (isord(c) && ispchr(ord(c)));
}

var state = {cmd:'',cmdHistory:[],cmdCursor:null,ctx:null,shift:false,mode:''};

function makespan(c) {
    var cElt = document.createElement("span");
    if (state.mode == "00") {
        cElt.style = "color : red;";
    }
    if (c == ' ') {
        cElt.innerHTML = '&nbsp;';
    } else {
        cElt.innerHTML = c;
    }
    return cElt;
}

function attachHeli() {
    var ctrls = document.createElement('div');
    var e = document.createElement('input');
    e.setAttribute('id','heliParams');
    e.setAttribute('value',"50;-55,55,-50,50;1;-1[70]+0;10,30,70;1;1");
    ctrls.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"drawheli()");
    e.innerHTML = "drawheli()";
    ctrls.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"clearCanvas()");
    e.innerHTML = "clearCanvas()";
    ctrls.appendChild(e);

    var ctrls2 = document.createElement('div');
    e = document.createElement('input');
    e.setAttribute('id','cardParams');
    ctrls2.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"drawcard()");
    e.innerHTML = "drawcard()";
    ctrls2.appendChild(e);

    e = document.createElement('button');
    e.setAttribute('onclick',"drawcard2()");
    e.innerHTML = "drawcard2()";
    ctrls2.appendChild(e);

    var view = document.createElement('canvas');
    view.setAttribute('id','hellocanvas');
    view.setAttribute('width',600);
    view.setAttribute('height',600);
    view.setAttribute('style','border:3px dashed #000000;');
    var c = document.getElementById('canvasdiv');
    c.appendChild(ctrls);
    c.appendChild(ctrls2);
    c.appendChild(view);
    initContext();
    clearCanvas();
}

function rollbackCmdHistory() {
    // compute state.cmdCursor
    if (state.cmdCursor === null) {
        state.cmdCursor = state.cmdHistory.length - 1;
    }
    // compute state.cmd based on state.cmdCursor and state.cmdHistory
    if (state.cmdCursor == null) {
        state.cmdCursor = state.cmdHistory.length - 1;
    } else if (state.cmdCursor > 0) {
        state.cmdCursor -= 1;
    }
    state.cmd = state.cmdHistory[state.cmdCursor];
    // clear cmdElt children
    var cmdElt = document.getElementById('cmddiv');
    var children = cmdElt.children;
    while (children.length > 0) {
        cmdElt.removeChild(children[0]);
    }
    // append character spans to cmdElt
    var i;
    for (i = 0; state.cmd.length > i; i += 1) {
        cmdElt.appendChild(makespan(state.cmd[i]));
    }
}

function virtualCaps() {
    if (state.shift == 2) {
        state.shift = 0;
    } else {
        state.shift = 2;
    }
    var shiftElt = document.getElementById('virtualShift');
    if (state.shift == 2) {
        shiftElt.innerHTML = "SHIFT";
    } else {
        shiftElt.innerHTML = "shift";
    }
}

function virtualShift() {
    if (state.shift == 0) {
        state.shift = 1;
    } else {
        state.shift = 0;
    }
    var shiftElt = document.getElementById('virtualShift');
    if (state.shift == 1) {
        shiftElt.innerHTML = "Shift";
    } else {
        shiftElt.innerHTML = "shift";
    }
}

function virtualEnter() {
    var cmdElt = document.getElementById('cmddiv');
    var children = cmdElt.children;
    while (children.length > 0) {
        cmdElt.removeChild(children[0]);
    }
    sayhello(state.cmd,0);
    state.cmdHistory.push(state.cmd);
    updateHello(state.cmd);
    state.cmd = '';
    state.cmdCursor = null;
}

function virtualBackspace() {
    if (state.cmd) {
        state.cmd = state.cmd.substring(0,state.cmd.length - 1);
        var cmdElt = document.getElementById('cmddiv');
        cmdElt.removeChild(cmdElt.children[cmdElt.children.length - 1]);
    }
}

function virtualKbd(k1,k2) {
    var k;
    if (state.shift == 2) {
        k = k2;
    } else if (state.shift == 1) {
        k = k2;
        virtualShift();
    } else {
        k = k1;
    }
    var cmdElt = document.getElementById('cmddiv');
    cmdElt.appendChild(makespan(k));
    state.cmd = state.cmd + k;
}

function getKey(keyCode,shiftKey) {
    if (shiftKey) {
        if (keyCode >= 65 && keyCode <= 90) {
            return chr(keyCode);
        } else if (keyCode >= 48 && keyCode <= 57) {
            return decodeShiftNumberArray[keyCode - 48];
        }
        // handle punctuation
        return '?';
    }
    // ! shiftKey
    if (keyCode >= 65 && keyCode <= 90) {
        return chr(keyCode + 32);
    } else if (keyCode >= 48 && keyCode <= 57) {
        return chr(keyCode);
    }
    // handle punctuation
    return '?';
}

var decodeShiftNumberArray = [')','!','@','#','$','%','^','&','*','('];

var keyActions0 = [
    function () { virtualKbd('`','~');},
    function () { virtualKbd('1','!');},
    function () { virtualKbd('2','@');},
    function () { virtualKbd('3','#');},
    function () { virtualKbd('4','$');},
    function () { virtualKbd('5','%');},
    function () { virtualKbd('6','^');},
    function () { virtualKbd('7','&');},
    function () { virtualKbd('8','*');},
    function () { virtualKbd('9','(');},
    function () { virtualKbd('0',')');},
    function () { virtualKbd('-','_');},
    function () { virtualKbd('=','+');},
    function () { virtualBackspace();},
];

var keyActions1 = [
    function () { virtualKbd('q','Q');},
    function () { virtualKbd('w','W');},
    function () { virtualKbd('e','E');},
    function () { virtualKbd('r','R');},
    function () { virtualKbd('t','T');},
    function () { virtualKbd('y','Y');},
    function () { virtualKbd('u','U');},
    function () { virtualKbd('i','I');},
    function () { virtualKbd('o','O');},
    function () { virtualKbd('p','P');},
    function () { virtualKbd('[','{');},
    function () { virtualKbd(']','}');},
    function () { virtualKbd('\\','|');},
];

var keyActions2 = [
    function () { virtualCaps();},
    function () { virtualKbd('a','A');},
    function () { virtualKbd('s','S');},
    function () { virtualKbd('d','D');},
    function () { virtualKbd('f','F');},
    function () { virtualKbd('g','G');},
    function () { virtualKbd('h','H');},
    function () { virtualKbd('j','J');},
    function () { virtualKbd('k','K');},
    function () { virtualKbd('l','L');},
    function () { virtualKbd(';',':');},
    function () { virtualKbd('\'','"');},
    function () { virtualEnter();},
];

var keyActions3 = [
    function () { virtualShift();},
    function () { virtualKbd('z','Z');},
    function () { virtualKbd('x','X');},
    function () { virtualKbd('c','C');},
    function () { virtualKbd('v','V');},
    function () { virtualKbd('b','B');},
    function () { virtualKbd('n','N');},
    function () { virtualKbd('m','M');},
    function () { virtualKbd(',','<');},
    function () { virtualKbd('.','>');},
    function () { virtualKbd('/','?');},
];

var keyActions4 = [
    function () { virtualKbd(' ',' ');},
];

function pageLoaded() {
    document.body.style.fontFamily = "courier";
    getHandle();
    getTag();
    getOpentime();
    var i;
    var kbd0 = document.getElementById('kbddiv0');
    for (i = 0; i < kbd0.children.length; i += 1) {
        var btnspan = kbd0.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions0[i]);
    }
    var kbd1 = document.getElementById('kbddiv1');
    for (i = 0; i < kbd1.children.length; i += 1) {
        var btnspan = kbd1.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions1[i]);
    }
    var kbd2 = document.getElementById('kbddiv2');
    for (i = 0; i < kbd2.children.length; i += 1) {
        var btnspan = kbd2.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions2[i]);
    }
    var kbd3 = document.getElementById('kbddiv3');
    for (i = 0; i < kbd3.children.length; i += 1) {
        var btnspan = kbd3.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions3[i]);
    }
    var kbd4 = document.getElementById('kbddiv4');
    for (i = 0; i < kbd4.children.length; i += 1) {
        var btnspan = kbd4.children[i];
        var btnelt = btnspan.children[0];
        btnelt.addEventListener('click', keyActions4[i]);
    }
    // attachHeli();
    document.body.onkeydown = function (e) {
        if (! (e.srcElement === document.body ||
               e.target === document.body)) {
            return;
        }
        if ( (e.keyCode >= 16 && e.keyCode <= 18) ||
             (e.shiftKey && e.ctrlKey ) ) {
            return;
        }
        // console.log(e);
        // console.log(e.keyCode);
        // console.log(getKey(e.keyCode,e.shiftKey));
        // console.log(ispord(getKey(e.keyCode,e.shiftKey)));
        if (e.keyCode == 13 && state.cmd) {
            virtualEnter();
        } else if (e.keyCode == 38) {
            rollbackCmdHistory();
        } else if (e.keyCode == 8) {
            virtualBackspace();
        } else if (e.key == ' ' || ispord(e.key)) {
            var cmdElt = document.getElementById('cmddiv');
            cmdElt.appendChild(makespan(e.key));
            state.cmd = state.cmd + e.key;
        } else if (e.keyCode == 32 || ispord(getKey(e.keyCode,e.shiftKey))) {
            var key = getKey(e.keyCode,e.shiftKey);
            // console.log(key);
            var cmdElt = document.getElementById('cmddiv');
            cmdElt.appendChild(makespan(key));
            state.cmd = state.cmd + key;
        }
    };
}

function canvasClick(e) {
    console.log(e.layerX);
    console.log(e.layerY);
    console.log(e);
}

function initContext() {
    var canvasElt = document.getElementById('hellocanvas');
    canvasElt.addEventListener("mousedown",canvasClick,false);
    // canvasElt.addEventListener("mouseup",canvasClick,false);
    // canvasElt.addEventListener("mousemove",canvasClick,false);
    state.ctx = canvasElt.getContext("2d");
}

function clearCanvas() {
    var ctx = state.ctx;
    ctx.clearRect(0,0,600,600);
}

function incarray(index,limit) {
    var i;
    for (i = 0; i < index.length; i += 1) {
        index[i] += 1;
        if (index[i] == limit[i]) {
            index[i] = 0;
            continue;
        } else {
            break;
        }
    }
}

function drawHeliArray(params, radiuslimit) {
    if (! params instanceof Array) {
        return;
    }
    var innerRadiusA = params[0].split(',');
    var outerRadiusA = params[1].split(',');
    var innerFactorA = params[2].split(',');
    var outerFactorA = params[3].split(',');
    var limit = [innerRadiusA.length, outerRadiusA.length,
        innerFactorA.length, outerFactorA.length];
    var index = [0,0,0,0];
    var ctx = state.ctx;
    var i;
    var n = 180;
    var xOrigin = 150;
    var yOrigin = 150;
    while (1) {
        var innerRadius = innerRadiusA[index[0]];
        var outerRadius = outerRadiusA[index[1]];
        var innerFactor = innerFactorA[index[2]];
        var outerFactor = outerFactorA[index[3]];
        for (i = 0; i < n; i += 1) {
            var innerRadians = innerFactor * 2 * Math.PI * (i / n);
            var outerRadians = outerFactor * 2 * Math.PI * (i / n);
            var x1 = innerRadius * Math.sin(innerRadians) +
                     outerRadius * Math.sin(outerRadians);
            var y1 = innerRadius * Math.cos(innerRadians) +
                     outerRadius * Math.cos(outerRadians);
            innerRadians = innerFactor * 2 * Math.PI * ((i+1) / n);
            outerRadians = outerFactor * 2 * Math.PI * ((i+1) / n);
            var x2 = innerRadius * Math.sin(innerRadians) +
                     outerRadius * Math.sin(outerRadians);
            var y2 = innerRadius * Math.cos(innerRadians) +
                     outerRadius * Math.cos(outerRadians);
            if (x1 * x1 + y1 * y1 > radiuslimit * radiuslimit &&
                    x2 * x2 + y2 * y2 > radiuslimit * radiuslimit) {
                ctx.beginPath();
                ctx.moveTo(xOrigin + x1,yOrigin + y1);
                ctx.lineTo(xOrigin + x2,yOrigin + y2);
                ctx.stroke();
            }
        }
        incarray(index,limit);
        if (index[0] == 0 && index[1] == 0 && index[2] == 0 &&
                             index[3] == 0) {
            break;
        }
    }
}

function drawcard() {
    var x1 = 30;
    var y1 = 30;
    var x2 = 120;
    var y2 = 45
    var ctx = state.ctx;
    ctx.beginPath();
    ctx.moveTo(x1,y1);
    ctx.lineTo(x2,y1);
    ctx.lineTo(x2,y2);
    ctx.lineTo(x1,y2);
    ctx.lineTo(x1,y1);
    ctx.stroke();
}

function drawcard2() {
    var x1 = 30;
    var y1 = 30;
    var x2 = 120;
    var y2 = 45
    var ctx = state.ctx;
    ctx.beginPath();
    ctx.rect(x1,y1,x2 - x1,y2 - y1);
    ctx.stroke();
    console.log('foo');
}

function drawheli() {
    var paramlist = document.getElementById('heliParams').value.split('+');
    var i;
    for (i = 0; i < paramlist.length; i += 1) {
        var radiuslimit = -1;
        var term = paramlist[i];
        if (term.indexOf('[') != -1) {
            radiuslimit = term.slice(term.indexOf('['),term.length);
            var term = term.slice(0,term.indexOf('['));
            radiuslimit = radiuslimit.slice(1,radiuslimit.length-1);
        }
        var params = term.split(';');
        drawHeliArray(params, radiuslimit);
    }
}

var poem1 = [ "Terrorists vs. Taxpayers",
        " ",
        "Suppose I am a taxpayer and a terrorist",
        "That means I have to pay taxes to the NSA",
        "And once I do that, the NSA will treat me",
        "Like a terrorist, steal from me, and call",
        "Me names because the NSA wants me dead",
        " ",
        "Why shouldn't I do everything in my power",
        "To get people in the NSA social network",
        "To commit suicide as fast as possible?",
        "The faster they commit suicide, the sooner",
        "I can stop paying taxes, the sooner",
        "All of the bullies who called me names will",
        "Be dead, and their families dead too",
        " ",
        "Oh I'm sorry, did I break your concentration?",
        " ",
        "If you are a bully who called me a terrorist",
        "I want you to commit suicide",
        "I want you to kill your kids and parents first though",
        " ",
        "You want me to pay taxes",
        "With the monopoly money you made?",
        "I want you to pay taxes with the lives",
        "Of your kids and parents",
        " ",
        "It's a central bank",
        "But we don't deal in paper",
        "We deal in the dead" ];

var poem2 = [ "Terrorists vs. Taxpayers",
        " ",
        "Suppose I     am         a     taxpayer and   a     terrorist",
        "That    means I          have  to       pay   taxes to        the   NSA",
        "And     once  I          do    that,    the   NSA   will      treat me",
        "Like    a     terrorist, steal from     me,   and   call",
        "Me      names because    the   NSA      wants me    dead",
        " ",
        "Why shouldn't I       do      everything in     my        power",
        "To  get       people  in      the        NSA    social    network",
        "To  commit    suicide as      fast       as     possible?",
        "The faster    they    commit  suicide,   the    sooner",
        "I   can       stop    paying  taxes,     the    sooner",
        "All of        the     bullies who        called me        names   will",
        "Be  dead,     and     their   families   dead   too",
        " ",
        "Oh I'm sorry, did I break your concentration?",
        " ",
        "If you  are a  bully  who     called me  a       terrorist",
        "I  want you to commit suicide",
        "I  want you to kill   your    kids   and parents first     though",
        " ",
        "You  want me       to    pay     taxes",
        "With the  monopoly money you     made?",
        "I    want you      to    pay     taxes with the lives",
        "Of   your kids     and   parents",
        " ",
        "It's a    central bank",
        "But  we   don't   deal in   paper",
        "We   deal in      the  dead" ];


function chaosbot() {
    updateHello("topic/nominate : 8 hours : 1 period : [A]");
    updateHello("primary/renominate : 48 hours : 6 periods : [B,C,D,E,F,G]");
    updateHello("secondary/test : 48 hours : 6 periods : [H,I,J,K,L,M]");
    var periodNames = ['A','B','C','D','E','F','G','H','I','J','K','L','M'];
    var now = new Date();
    updateHello("" + now.getHours() + ":" + now.getMinutes());
    var init = new Date();
    init.setMilliseconds(0);
    init.setSeconds(0);
    init.setMinutes(0);
    init.setHours(17);
    init.setMonth(5);
    init.setDate(21);
    var roundMilliseconds = 104 * 60 * 60 * 1000;
    var offset = 0;
    if (now - init <= 0) {
        now.setTime(now.getTime() + roundMilliseconds);
        offset -= 1;
    }
    var roundIndex = (now - init) / roundMilliseconds;
    var periodIndex = 13 * (roundIndex - Math.trunc(roundIndex));
    var fractionalPeriod = 1000 * (periodIndex - Math.trunc(periodIndex));
    updateHello("Round " + (offset + Math.trunc(roundIndex)));
    updateHello("Period " + periodNames[Math.trunc(periodIndex)]);
    updateHello("Fractional Period " + Math.trunc(fractionalPeriod) + " (1000)");
}

function sayhello(content, broadcast) {
    if (content == "chaosbot") {
        chaosbot();
    }
    if (content == "00") {
        clearHello();
        state.mode = '00';
        return;
    }
    if (content == "0000") {
        clearHello();
        state.mode = '0000';
        return;
    }
    if (content == "clear") {
        clearHello();
        return;
    }
    if (content == "reload") {
        location.reload();
    }
    if (content == "heli") {
        attachHeli();
        return;
    }
    if (content == "zuck") {
        updateHello("I will not live in fear of a bug");
        return;
    }
    if (content == "teen") {
        updateHello("<a href=\"http://www.pbs.org/wgbh/pages/frontline/shows/cool/etc/script.html\">They look at the teen market as part of this massive empire that they're colonizing. Teens are like Africa.</a>",1);
        return;
    }
    if (content == "math") {
        updateHello("insist on wide latitude in the study of contradictions");
        return;
    }
    if (content == "poem") {
        var poem;
        if (state.mode == '00') {
            poem = poem2;
        } else {
            poem = poem1;
        }
        var i;
        for (i = 0; i < poem.length; i += 1) {
             updateHello(poem[i]);
        }
    }
    if (content == "code") {
        imgHello("https://my.mixtape.moe/xmajtr.png");
    }
    if (content == "boat") {
        imgHello("http://anythingbot.org/anythingboat.JPG",450);
    }
    if (content == "fbi") {
        updateHello("So,");
        updateHello("There are people who say");
        updateHello("'Do you believe in god?' 'No?' 'Well, FUCK YOU!'");
        updateHello("and 'are you a retard?' 'Yeah?' 'Well, FUCK YOU!'.");
        updateHello("I call these the people who ask questions about god");
        updateHello("and the people who ask questions about IQ.");
        updateHello("So let me tell you");
        updateHello("I ain't never heard of this 'god' character, ok pal?");
        updateHello("and who'se IQ? Is she blond? She got a nice figure?");
        updateHello("So is god her sidekick or something?");
        updateHello("Image : bourbon, desk, trenchcoat, stench of old office");
        updateHello("You think, 'old world nerd, didn't know they still made 'em'");
        updateHello("He is standing there, in front of you");
        updateHello("It is a terrible impression of a gangster from another era");
        updateHello("Everything is wrong except for the delivery, which is, of course,");
        updateHello("the ... one thing ... that makes up for the others, the faults.");
        updateHello("The delivery is amazing. Korean-level amazing. Like those K-pop");
        updateHello("girls. Those asses are so cute. Damn.");
        updateHello("Anyway, the bourbon needs a reload.");
        updateHello("Reflecting on your drink, you have the luxury of pouring a glass");
        updateHello("that is 7 percent full to a glass that is 45 percent full");
        updateHello("and there is no woman present to scold you with a sarcastic remark");
        updateHello("along the lines of: you should have finished the 7 percent");
        updateHello("and poured the 38 percent.");
        updateHello("The man you are looking at has clearly heard of god.");
        updateHello("The man knows this.");
        updateHello("You know this.");
        updateHello("You say, 'What is this, some kind of post-modern or post-modernist revival?'");
        updateHello("The man stares back at you blankly. He appears to be playing it straight.");
        updateHello("This makes you extraordinarily uncomfortable in a way that is speific but also");
        updateHello("undefinable in a peculiar way...");
        updateHello("...as if he---and the brain skips a cycle---had truly never heard of god...");
        updateHello("He carries on,");
        updateHello("'Is IQ the woman in the red dress?'");
    } else if (content == "contraorg") {
        updateHello("Contradiction Organization");
        return;
    }
    if (ws.readyState != WebSocket.OPEN) {
        console.log("websocket is closed");
        return;
    }
    if (!content) {
        content = 'hello';
    }
    if (broadcast) {
        broadcast = 1;
    } else {
        broadcast = 0;
    }
    var data = {
        content: content,
        broadcast: broadcast
    };
    ws.send(JSON.stringify(data));
}

        </script>
        <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
        <title>Bot Will Accept Anything</title>
        <meta name="author" content="Sync Music Video">
        <link rel="stylesheet" type="text/css" href="/css/media.css" />
    </head>
    <body onload="pageLoaded()"><h1 id="Header">Websockets hello world</h1>

    <div class="Content">
        {{{body}}}
    </div>
    </body>
</html>
